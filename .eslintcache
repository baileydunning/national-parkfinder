[{"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/index.js":"1","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/App/App.tsx":"2","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkData.js":"3","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Footer/Footer.tsx":"4","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"5","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedParks/SavedParks.tsx":"6","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/MainNav/MainNav.tsx":"7","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"8","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"9","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkList/ParkList.tsx":"10","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Banner/Banner.tsx":"11","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/UserNav/UserNav.tsx":"12","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"13","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedCard/SavedCard.tsx":"14","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"15","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/StateDropdown/StateDropdown.tsx":"16","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/About/About.tsx":"17","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Location/Location.tsx":"18","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Contact/Contact.tsx":"19","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"20"},{"size":269,"mtime":1611708565735,"results":"21","hashOfConfig":"22"},{"size":4940,"mtime":1611712389297,"results":"23","hashOfConfig":"22"},{"size":15801,"mtime":1610468210427,"results":"24","hashOfConfig":"22"},{"size":518,"mtime":1610468210420,"results":"25","hashOfConfig":"22"},{"size":1848,"mtime":1611708565731,"results":"26","hashOfConfig":"22"},{"size":1788,"mtime":1611712735377,"results":"27","hashOfConfig":"22"},{"size":2427,"mtime":1611708565729,"results":"28","hashOfConfig":"22"},{"size":264,"mtime":1610303473207,"results":"29","hashOfConfig":"22"},{"size":684,"mtime":1610478222589,"results":"30","hashOfConfig":"22"},{"size":836,"mtime":1610512437749,"results":"31","hashOfConfig":"22"},{"size":1753,"mtime":1611708565728,"results":"32","hashOfConfig":"22"},{"size":604,"mtime":1611708565735,"results":"33","hashOfConfig":"22"},{"size":1919,"mtime":1611708565732,"results":"34","hashOfConfig":"22"},{"size":1465,"mtime":1611708565733,"results":"35","hashOfConfig":"22"},{"size":558,"mtime":1611708565730,"results":"36","hashOfConfig":"22"},{"size":3242,"mtime":1611708565734,"results":"37","hashOfConfig":"22"},{"size":684,"mtime":1610303473189,"results":"38","hashOfConfig":"22"},{"size":702,"mtime":1610468210421,"results":"39","hashOfConfig":"22"},{"size":1245,"mtime":1610468210418,"results":"40","hashOfConfig":"22"},{"size":2496,"mtime":1610399783418,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1agcvs0",{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/index.js",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/App/App.tsx",["89","90"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkData.js",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Footer/Footer.tsx",[],["91","92"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedParks/SavedParks.tsx",["93"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/MainNav/MainNav.tsx",["94"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\nimport StateDropdown from '../StateDropdown/StateDropdown';\n\ninterface FilterButtonsByName {\n  filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype NavProps = LocalParkData | FilterButtonsByName | GenerateRandomParkCode | {filterButtons: () => void}\n\nconst MainNav: React.FC<NavProps> = (props) => {\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const [nameSearch, setNameSearch] = useState<string>('')\n  const [stateSelection, setStateSelection] = useState<string>('')\n  const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>([])\n\n  useEffect(() => {\n    filterButtons(nameSearch, stateSelection)\n  }, [nameSearch, stateSelection])\n\n  const createNavBtns = (parks: Array<LocalParkData>): void => {\n    const parkButtons = parks.map(park => {\n      return <ParkBtn\n        key={park.parkCode}\n        name={park.name}\n        image={park.image}\n        state={park.state}\n        parkCode={park.parkCode}\n      />\n    })\n    setParksOnDisplay(parkButtons)\n  }\n\n  const setSearch = (searchTerm: string) => {\n    setNameSearch(searchTerm)\n  }\n\n   const setStateSelect = (stateSelection: string) => {\n    setStateSelection(stateSelection)\n  }\n\n  const filterButtons = (searchTerm: string, stateSelection: string) => {\n    setNameSearch(searchTerm)\n    setStateSelection(stateSelection)\n    const filteredParks = nationalParks.filter(park => {\n      return park.name.toLowerCase().includes(searchTerm.toLowerCase()) && park.state.includes(stateSelection)\n    })\n\n    createNavBtns(filteredParks)\n  }\n\n  return (\n    <nav className='main-nav'>\n      <img\n        className='logo'\n        src={parkfinderLogo}\n        alt='National Parkfinder Logo'\n      />\n      <h1 className='site-header'>National Parkfinder</h1>\n      <NavSearch setSearch={setSearch}/>\n      <StateDropdown setStateSelect={setStateSelect}/>\n      <ParkList\n        generateRandomParkCode={generateRandomParkCode}\n        parksOnDisplay={parksOnDisplay}\n      />\n    </nav>\n  )\n}\n\nexport default MainNav","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],["95","96"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkList/ParkList.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Banner/Banner.tsx",["97","98"],"import './Banner.scss'\nimport { CurrentParkContainer, LocalParkContainer } from '../interfaces'\nimport { useEffect, useState } from 'react'\ntype BannerIconsProps = LocalParkContainer | CurrentParkContainer | { parkCode: string }\n\nconst Banner: React.FC<BannerIconsProps> = props => {\n  const { currentPark } = props as CurrentParkContainer\n  const { images } = currentPark as any\n  const [imageIndex, setImageIndex] = useState<number>(0)\n  const [numImages, setNumImages] = useState<number>(images.length - 1)\n  const [displayImage, setDisplayImage] = useState(images[imageIndex])\n\n  useEffect(() => {\n    setImageIndex(0)\n    setDisplayImage(images[imageIndex])\n    setNumImages(images.length - 1)\n  }, [currentPark])\n\n  useEffect(() => {\n    setDisplayImage(images[imageIndex])\n  }, [imageIndex])\n\n  const navigateToImage = (index) => {\n    setImageIndex(index)\n  }\n\n  return (\n    <section className='banner'>\n      <div className='header-container'>\n        <h1 className='header'>{currentPark.fullName}, {currentPark.states}</h1>\n        <p className='caption'>\n          {displayImage.caption}\n        </p>\n      </div>\n      <div className='image-container'>\n        {imageIndex > 0 &&\n          <button \n            onClick={() => navigateToImage(imageIndex - 1)}\n            className='nav-img-btn'>\n            ❮\n          </button>}\n        <img\n          className='banner-img'\n          data-testid='banner-img'\n          src={displayImage.url}\n          alt={displayImage.altText}\n        />\n        {imageIndex !== numImages &&\n          <button\n            onClick={() => navigateToImage(imageIndex + 1)}\n            className='nav-img-btn'>\n            ❯\n          </button>}\n      </div>\n    </section>\n  )\n}\n\nexport default Banner","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedCard/SavedCard.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",["99"],"import './ParkBtn.scss'\nimport { LocalParkData } from '../interfaces'\nimport { Link } from 'react-router-dom'\n\n\ntype ParkBtnProps = LocalParkData\n\nconst ParkBtn: React.FC<ParkBtnProps> = props => {\n  const { name } = props as LocalParkData\n  const { parkCode } = props as LocalParkData\n\n  return (\n    <Link\n      data-testid={`${parkCode} button`}\n      to={`/park/${parkCode}/about`}\n      className=\"main-nav-link\"\n      >\n      <button\n        role=\"button\"\n        className=\"park-button\"\n      >{name}</button>\n    </Link>\n  )\n}\n\nexport default ParkBtn","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/StateDropdown/StateDropdown.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/About/About.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Location/Location.tsx",["100"],"import { CurrentParkContainer } from '../interfaces'\nimport './Location.scss'\n\nconst Location: React.FC<CurrentParkContainer> = props => {\n  const { currentPark } = props as CurrentParkContainer\n  return (\n    <section>\n      <p><b>Driving directions to {currentPark.name}: </b>{currentPark.directionsInfo}</p>\n      <div className='map-container'>\n        <iframe\n          src={`https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d196281.64169563106!2d${currentPark.longitude}!3d${currentPark.latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1610139788967!5m2!1sen!2sus`}\n          className='map'>\n        </iframe >\n      </div>\n    </section>\n  )\n}\n\nexport default Location\n","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["101"],"import './BannerIcons.scss'\nimport { useEffect, useState } from 'react'\nimport { AddRemoveFunctionality } from '../interfaces'\nimport bucketBlack from './icons/bucket-black.png'\nimport bucketGreen from './icons/bucket-green.png'\nimport checkBlack from './icons/check-black.png'\nimport checkGreen from './icons/check-green.png'\n\ntype BannerIconsProps = AddRemoveFunctionality | { localPark: () => any | void } \n\n\nconst BannerIcons: React.FC<BannerIconsProps> = props => {\n  const { addToVisited } = props as AddRemoveFunctionality\n  const { deleteFromVisited } = props as AddRemoveFunctionality\n  const { addToBucketList } = props as AddRemoveFunctionality\n  const { deleteFromBucketList } = props as AddRemoveFunctionality\n  const { localPark } = props as any\n\n  const [checkColor, setCheckColor] = useState<any>()\n  const [bucketColor, setBucketColor] = useState<any>()\n\n  useEffect(() => {\n    if (localPark.visited) {\n      setCheckColor(checkGreen)\n    } else {\n      setCheckColor(checkBlack)\n    }\n\n    if (localPark.bucketList) {\n      setBucketColor(bucketGreen)\n    } else {\n      setBucketColor(bucketBlack)\n    }\n  })\n\n  const handleVisitedPark = () => {\n    if (!localPark.visited) {\n      addToVisited(localPark.parkCode)\n      localPark.visited = true\n    } else {\n      deleteFromVisited(localPark.parkCode)\n      localPark.visited = false\n    }\n  }\n\n  const handleBucketListPark = () => {\n    if (!localPark.bucketList) {\n      addToBucketList(localPark.parkCode)\n      localPark.bucketList = true\n    } else {\n      deleteFromBucketList(localPark.parkCode)\n      localPark.bucketList = false\n    }\n  }\n\n  return (\n    <section className=\"banner-icons\">\n      <div role=\"button\"\n        data-testid=\"visited\"\n        onClick={ handleVisitedPark }\n        className=\"banner-btn-container\">\n        <img\n          src={checkColor}\n          alt=\"visited\"\n          className=\"saved-icon\"\n        />\n        {!localPark.visited && <h2>Add To Visited</h2>}\n        {localPark.visited && <h2>Remove From Visited</h2>}\n      </div>\n      <div\n        data-testid=\"bucket-list\"\n        role=\"button\"\n        onClick={ handleBucketListPark }\n        className=\"banner-btn-container\">\n        <img\n          src={bucketColor}\n          alt=\"bucket list\"\n          className=\"saved-icon\"\n        />\n        {!localPark.bucketList && <h2>Add To Bucket List</h2>}\n        {localPark.bucketList && <h2>Remove From Bucket List</h2>}\n      </div>\n    </section>\n  )\n}\n\nexport default BannerIcons",{"ruleId":"102","severity":1,"message":"103","line":19,"column":6,"nodeType":"104","endLine":19,"endColumn":8,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":29,"column":6,"nodeType":"104","endLine":29,"endColumn":31,"suggestions":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"102","severity":1,"message":"112","line":16,"column":3,"nodeType":"113","endLine":16,"endColumn":12,"suggestions":"114"},{"ruleId":"102","severity":1,"message":"115","line":29,"column":6,"nodeType":"104","endLine":29,"endColumn":34,"suggestions":"116"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"102","severity":1,"message":"117","line":17,"column":6,"nodeType":"104","endLine":17,"endColumn":19,"suggestions":"118"},{"ruleId":"102","severity":1,"message":"119","line":21,"column":6,"nodeType":"104","endLine":21,"endColumn":18,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":18,"column":7,"nodeType":"123","endLine":21,"endColumn":8},{"ruleId":"124","severity":1,"message":"125","line":10,"column":9,"nodeType":"123","endLine":12,"endColumn":27},{"ruleId":"102","severity":1,"message":"126","line":22,"column":3,"nodeType":"113","endLine":22,"endColumn":12,"suggestions":"127"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'retrieveFromStorage'. Either include it or remove the dependency array.","ArrayExpression",["128"],"React Hook useEffect has a missing dependency: 'saveToStorage'. Either include it or remove the dependency array.",["129"],"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"React Hook useEffect contains a call to 'setParkList'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [location.pathname, visitedList, bucketList] as a second argument to the useEffect Hook.","Identifier",["132"],"React Hook useEffect has a missing dependency: 'filterButtons'. Either include it or remove the dependency array.",["133"],"React Hook useEffect has missing dependencies: 'imageIndex' and 'images'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDisplayImage' needs the current value of 'imageIndex'.",["134"],"React Hook useEffect has a missing dependency: 'images'. Either include it or remove the dependency array.",["135"],"jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useEffect contains a call to 'setCheckColor'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [localPark.visited, localPark.bucketList] as a second argument to the useEffect Hook.",["136"],{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [retrieveFromStorage]",{"range":"151","text":"152"},"Update the dependencies array to be: [visitedList, bucketList, saveToStorage]",{"range":"153","text":"154"},"Add dependencies array: [location.pathname, visitedList, bucketList]",{"range":"155","text":"156"},"Update the dependencies array to be: [filterButtons, nameSearch, stateSelection]",{"range":"157","text":"158"},"Update the dependencies array to be: [currentPark, imageIndex, images]",{"range":"159","text":"160"},"Update the dependencies array to be: [imageIndex, images]",{"range":"161","text":"162"},"Add dependencies array: [localPark.visited, localPark.bucketList]",{"range":"163","text":"164"},[757,759],"[retrieveFromStorage]",[908,933],"[visitedList, bucketList, saveToStorage]",[995,995],", [location.pathname, visitedList, bucketList]",[1062,1090],"[filterButtons, nameSearch, stateSelection]",[704,717],"[currentPark, imageIndex, images]",[785,797],"[imageIndex, images]",[1127,1127],", [localPark.visited, localPark.bucketList]"]