[{"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/index.js":"1","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/App/App.tsx":"2","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkData.js":"3","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"4","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/MainNav/MainNav.tsx":"5","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Footer/Footer.tsx":"6","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"7","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/UserNav/UserNav.tsx":"8","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedParks/SavedParks.tsx":"9","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"10","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Banner/Banner.tsx":"11","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkList/ParkList.tsx":"12","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"13","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"14","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/StateDropdown/StateDropdown.tsx":"15","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedCard/SavedCard.tsx":"16","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/About/About.tsx":"17","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Contact/Contact.tsx":"18","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Location/Location.tsx":"19","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"20"},{"size":323,"mtime":1610303473217,"results":"21","hashOfConfig":"22"},{"size":1410,"mtime":1610470438296,"results":"23","hashOfConfig":"22"},{"size":15801,"mtime":1610468210427,"results":"24","hashOfConfig":"22"},{"size":4390,"mtime":1610496844386,"results":"25","hashOfConfig":"22"},{"size":2622,"mtime":1610468210423,"results":"26","hashOfConfig":"22"},{"size":518,"mtime":1610468210420,"results":"27","hashOfConfig":"22"},{"size":264,"mtime":1610303473207,"results":"28","hashOfConfig":"22"},{"size":589,"mtime":1610303473216,"results":"29","hashOfConfig":"22"},{"size":1881,"mtime":1610495549361,"results":"30","hashOfConfig":"22"},{"size":1904,"mtime":1610303473210,"results":"31","hashOfConfig":"22"},{"size":948,"mtime":1610468210416,"results":"32","hashOfConfig":"22"},{"size":836,"mtime":1610413865692,"results":"33","hashOfConfig":"22"},{"size":722,"mtime":1610468210426,"results":"34","hashOfConfig":"22"},{"size":684,"mtime":1610478222589,"results":"35","hashOfConfig":"22"},{"size":3065,"mtime":1610478222590,"results":"36","hashOfConfig":"22"},{"size":1473,"mtime":1610497532044,"results":"37","hashOfConfig":"22"},{"size":684,"mtime":1610303473189,"results":"38","hashOfConfig":"22"},{"size":1245,"mtime":1610468210418,"results":"39","hashOfConfig":"22"},{"size":702,"mtime":1610468210421,"results":"40","hashOfConfig":"22"},{"size":2496,"mtime":1610399783418,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1agcvs0",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/index.js",[],["90","91"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/App/App.tsx",["92"],"import './App.scss'\nimport React, { useState, useEffect } from 'react'\nimport MainNav from '../MainNav/MainNav'\nimport ParkContainer from '../ParkContainer/ParkContainer'\nimport Footer from '../Footer/Footer'\nimport { Route, Switch, useLocation } from 'react-router-dom'\nimport { nationalParks } from '../ParkData'\n\nconst App: React.FC = () => {\n  const [parkCode, setParkCode] = useState<string>('')\n  const location = useLocation()\n  const choosePark = (parkCodeId: string) => {\n    setParkCode(parkCodeId)\n  }\n\n  useEffect(() => {\n    if (location.pathname === '/') {\n      generateRandomParkCode()\n      location.pathname = `/${parkCode}`\n    } else {\n      setParkCode(location.pathname.split('/')[1])\n    }\n  }, [parkCode])\n\n  const generateRandomParkCode = (): void => {\n      let index = Math.floor(Math.random() * nationalParks.length)\n      setParkCode(nationalParks[index].parkCode)\n  }\n\n  return (\n    <main className='app'>\n      <section className='body'>\n        <MainNav\n          choosePark={choosePark}\n          generateRandomParkCode={generateRandomParkCode} />\n        <Switch>\n          <Route\n            path={location.pathname}\n            render={() => {\n              return (\n                <ParkContainer\n                  parkCode={parkCode} />\n              )\n            }}\n          />\n        </Switch>\n      </section>\n      <Footer />\n    </main>\n  )\n}\n\nexport default App\n",["93","94"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkData.js",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/MainNav/MainNav.tsx",["95"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\nimport StateDropdown from '../StateDropdown/StateDropdown';\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface FilterButtonsByName {\n  filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype NavProps = ChoosePark | LocalParkData | FilterButtonsByName | GenerateRandomParkCode | {filterButtons: () => void}\n\nconst MainNav: React.FC<NavProps> = (props) => {\n  const { choosePark } = props as ChoosePark\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const [nameSearch, setNameSearch] = useState<string>('')\n  const [stateSelection, setStateSelection] = useState<string>('')\n  const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>([])\n\n  useEffect(() => {\n    filterButtons(nameSearch, stateSelection)\n  }, [nameSearch, stateSelection])\n\n  const createNavBtns = (parks: Array<LocalParkData>): void => {\n    const parkButtons = parks.map(park => {\n      return <ParkBtn\n        key={park.parkCode}\n        name={park.name}\n        parkCode={park.parkCode}\n        choosePark={choosePark}\n      />\n    })\n    setParksOnDisplay(parkButtons)\n  }\n\n  const setSearch = (searchTerm: string) => {\n    setNameSearch(searchTerm)\n  }\n\n   const setStateSelect = (stateSelection: string) => {\n    setStateSelection(stateSelection)\n  }\n\n  const filterButtons = (searchTerm: string, stateSelection: string) => {\n    setNameSearch(searchTerm)\n    setStateSelection(stateSelection)\n    const filteredParks = nationalParks.filter(park => {\n      return park.name.toLowerCase().includes(searchTerm.toLowerCase()) && park.state.includes(stateSelection)\n    })\n\n    if (filteredParks.length > 0) {\n      createNavBtns(filteredParks)\n    } else {\n      createNavBtns(nationalParks)\n    }\n  }\n\n  return (\n    <nav className='main-nav'>\n      <img\n        className='logo'\n        src={parkfinderLogo}\n        alt='National Parkfinder Logo'\n      />\n      <h1 className='site-header'>National Parkfinder</h1>\n      <NavSearch setSearch={setSearch}/>\n      <StateDropdown setStateSelect={setStateSelect}/>\n      <ParkList\n        generateRandomParkCode={generateRandomParkCode}\n        parksOnDisplay={parksOnDisplay}\n      />\n    </nav>\n  )\n}\n\nexport default MainNav","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Footer/Footer.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedParks/SavedParks.tsx",["96"],"import { useEffect, useState } from 'react'\nimport { LocalParkContainer, LocalParkData, AddRemoveFunctionality } from '../interfaces'\nimport SavedCard from '../SavedCard/SavedCard'\nimport { useLocation } from 'react-router-dom'\nimport './SavedParks.scss'\n\nconst SavedParks: React.FC<LocalParkContainer & AddRemoveFunctionality> = props => {\n  const [pageTitle, setPageTitle] = useState<string>('My Parks')\n  const location = useLocation()\n  const { visitedList, bucketList } = props as LocalParkContainer\n  const { addToVisited, deleteFromVisited, addToBucketList, deleteFromBucketList } = props as AddRemoveFunctionality\n  const [visitedListDisplay, setVisitedListDisplay] = useState<Array<JSX.Element>>([])\n\n  useEffect(() => {\n    let parkList = []\n    if (location.pathname === '/user/visited') {\n      parkList = visitedList\n      setPageTitle('My Visited Parks')\n    } else if (location.pathname === '/user/bucket-list') {\n      parkList = bucketList\n      setPageTitle('My Bucket List Parks')\n    }\n      const visitedCards = parkList.map((savedPark: LocalParkData) => {\n        return <SavedCard\n          key={savedPark.parkCode}\n          name={savedPark.name}\n          image={savedPark.image}\n          parkCode={savedPark.parkCode}\n          state={savedPark.state}\n          bucketList={savedPark.bucketList}\n          visited={savedPark.visited}\n          addToVisited={addToVisited}\n          deleteFromVisited={deleteFromVisited}\n          addToBucketList={addToBucketList}\n          deleteFromBucketList={deleteFromBucketList}\n        />\n      })\n      setVisitedListDisplay(visitedCards)\n  }, [visitedList, bucketList])\n\n  return (\n    <section>\n      <h1 style={{textAlign: \"center\"}}>\n        {pageTitle}\n      </h1>\n      <section className=\"saved-parks-container\">\n        {visitedListDisplay}\n      </section>\n    </section>\n  )\n}\n\nexport default SavedParks","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Banner/Banner.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkList/ParkList.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",["97"],"import './ParkBtn.scss'\nimport { LocalParkData } from '../interfaces'\nimport { Link } from 'react-router-dom'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void;\n}\n\ntype ParkBtnProps = LocalParkData | ChoosePark\n\nconst ParkBtn: React.FC<ParkBtnProps> = props => {\n  const { name } = props as LocalParkData\n  const { parkCode } = props as LocalParkData\n  const { choosePark } = props as ChoosePark\n  return (\n    <Link\n      data-testid={`${parkCode} button`}\n      to={`/${parkCode}/about`}\n      className=\"main-nav-link\"\n      >\n      <button\n        role=\"button\"\n        className=\"park-button\"\n        onClick={() => choosePark(parkCode)}\n      >{name}</button>\n    </Link>\n  )\n}\n\nexport default ParkBtn","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/StateDropdown/StateDropdown.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedCard/SavedCard.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/About/About.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Location/Location.tsx",["98"],"import { CurrentParkContainer } from '../interfaces'\nimport './Location.scss'\n\nconst Location: React.FC<CurrentParkContainer> = props => {\n  const { currentPark } = props as CurrentParkContainer\n  return (\n    <section>\n      <p><b>Driving directions to {currentPark.name}: </b>{currentPark.directionsInfo}</p>\n      <div className='map-container'>\n        <iframe\n          src={`https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d196281.64169563106!2d${currentPark.longitude}!3d${currentPark.latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1610139788967!5m2!1sen!2sus`}\n          className='map'>\n        </iframe >\n      </div>\n    </section>\n  )\n}\n\nexport default Location\n","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["99"],"import './BannerIcons.scss'\nimport { useEffect, useState } from 'react'\nimport { AddRemoveFunctionality } from '../interfaces'\nimport bucketBlack from './icons/bucket-black.png'\nimport bucketGreen from './icons/bucket-green.png'\nimport checkBlack from './icons/check-black.png'\nimport checkGreen from './icons/check-green.png'\n\ntype BannerIconsProps = AddRemoveFunctionality | { localPark: () => any | void } \n\n\nconst BannerIcons: React.FC<BannerIconsProps> = props => {\n  const { addToVisited } = props as AddRemoveFunctionality\n  const { deleteFromVisited } = props as AddRemoveFunctionality\n  const { addToBucketList } = props as AddRemoveFunctionality\n  const { deleteFromBucketList } = props as AddRemoveFunctionality\n  const { localPark } = props as any\n\n  const [checkColor, setCheckColor] = useState<any>()\n  const [bucketColor, setBucketColor] = useState<any>()\n\n  useEffect(() => {\n    if (localPark.visited) {\n      setCheckColor(checkGreen)\n    } else {\n      setCheckColor(checkBlack)\n    }\n\n    if (localPark.bucketList) {\n      setBucketColor(bucketGreen)\n    } else {\n      setBucketColor(bucketBlack)\n    }\n  })\n\n  const handleVisitedPark = () => {\n    if (!localPark.visited) {\n      addToVisited(localPark.parkCode)\n      localPark.visited = true\n    } else {\n      deleteFromVisited(localPark.parkCode)\n      localPark.visited = false\n    }\n  }\n\n  const handleBucketListPark = () => {\n    if (!localPark.bucketList) {\n      addToBucketList(localPark.parkCode)\n      localPark.bucketList = true\n    } else {\n      deleteFromBucketList(localPark.parkCode)\n      localPark.bucketList = false\n    }\n  }\n\n  return (\n    <section className=\"banner-icons\">\n      <div role=\"button\"\n        data-testid=\"visited\"\n        onClick={ handleVisitedPark }\n        className=\"banner-btn-container\">\n        <img\n          src={checkColor}\n          alt=\"visited\"\n          className=\"saved-icon\"\n        />\n        {!localPark.visited && <h2>Add To Visited</h2>}\n        {localPark.visited && <h2>Remove From Visited</h2>}\n      </div>\n      <div\n        data-testid=\"bucket-list\"\n        role=\"button\"\n        onClick={ handleBucketListPark }\n        className=\"banner-btn-container\">\n        <img\n          src={bucketColor}\n          alt=\"bucket list\"\n          className=\"saved-icon\"\n        />\n        {!localPark.bucketList && <h2>Add To Bucket List</h2>}\n        {localPark.bucketList && <h2>Remove From Bucket List</h2>}\n      </div>\n    </section>\n  )\n}\n\nexport default BannerIcons",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":23,"column":6,"nodeType":"106","endLine":23,"endColumn":16,"suggestions":"107"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"108","line":34,"column":6,"nodeType":"106","endLine":34,"endColumn":34,"suggestions":"109"},{"ruleId":"104","severity":1,"message":"110","line":39,"column":6,"nodeType":"106","endLine":39,"endColumn":31,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":21,"column":7,"nodeType":"114","endLine":25,"endColumn":8},{"ruleId":"115","severity":1,"message":"116","line":10,"column":9,"nodeType":"114","endLine":12,"endColumn":27},{"ruleId":"104","severity":1,"message":"117","line":22,"column":3,"nodeType":"118","endLine":22,"endColumn":12,"suggestions":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location'. Either include it or remove the dependency array.","ArrayExpression",["122"],"React Hook useEffect has a missing dependency: 'filterButtons'. Either include it or remove the dependency array.",["123"],"React Hook useEffect has missing dependencies: 'addToBucketList', 'addToVisited', 'deleteFromBucketList', 'deleteFromVisited', and 'location.pathname'. Either include them or remove the dependency array.",["124"],"jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useEffect contains a call to 'setCheckColor'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [localPark.visited, localPark.bucketList] as a second argument to the useEffect Hook.","Identifier",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [location, parkCode]",{"range":"134","text":"135"},"Update the dependencies array to be: [filterButtons, nameSearch, stateSelection]",{"range":"136","text":"137"},"Update the dependencies array to be: [visitedList, bucketList, location.pathname, addToVisited, deleteFromVisited, addToBucketList, deleteFromBucketList]",{"range":"138","text":"139"},"Add dependencies array: [localPark.visited, localPark.bucketList]",{"range":"140","text":"141"},[718,728],"[location, parkCode]",[1187,1215],"[filterButtons, nameSearch, stateSelection]",[1612,1637],"[visitedList, bucketList, location.pathname, addToVisited, deleteFromVisited, addToBucketList, deleteFromBucketList]",[1127,1127],", [localPark.visited, localPark.bucketList]"]