[{"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js":"1","/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx":"2","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js":"3","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Footer/Footer.tsx":"4","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"5","/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx":"6","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"7","/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx":"8","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"9","/Users/bailey/turing/3mod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"10","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"11","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx":"12","/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedParks/SavedParks.tsx":"13","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx":"14","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx":"15","/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx":"16","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx":"17","/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"18","/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedCard/SavedCard.tsx":"19"},{"size":323,"mtime":1610295583863,"results":"20","hashOfConfig":"21"},{"size":1404,"mtime":1610296069469,"results":"22","hashOfConfig":"21"},{"size":13972,"mtime":1610295583855,"results":"23","hashOfConfig":"21"},{"size":424,"mtime":1610295583849,"results":"24","hashOfConfig":"21"},{"size":4164,"mtime":1610299233589,"results":"25","hashOfConfig":"21"},{"size":2079,"mtime":1610296069470,"results":"26","hashOfConfig":"21"},{"size":264,"mtime":1610296069472,"results":"27","hashOfConfig":"21"},{"size":589,"mtime":1610295583861,"results":"28","hashOfConfig":"21"},{"size":1904,"mtime":1610299545612,"results":"29","hashOfConfig":"21"},{"size":686,"mtime":1610295583853,"results":"30","hashOfConfig":"21"},{"size":620,"mtime":1610295583854,"results":"31","hashOfConfig":"21"},{"size":865,"mtime":1610296069470,"results":"32","hashOfConfig":"21"},{"size":1624,"mtime":1610299397242,"results":"33","hashOfConfig":"21"},{"size":766,"mtime":1610296069472,"results":"34","hashOfConfig":"21"},{"size":643,"mtime":1610295583851,"results":"35","hashOfConfig":"21"},{"size":684,"mtime":1610295583843,"results":"36","hashOfConfig":"21"},{"size":1122,"mtime":1610295583848,"results":"37","hashOfConfig":"21"},{"size":2449,"mtime":1610295583847,"results":"38","hashOfConfig":"21"},{"size":1320,"mtime":1610300646430,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"2r4utd",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js",[],["85","86"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx",["87"],"import './App.scss'\nimport React, { useState, useEffect } from 'react'\nimport MainNav from '../MainNav/MainNav'\nimport ParkContainer from '../ParkContainer/ParkContainer'\nimport Footer from '../Footer/Footer'\nimport { Route, Switch, useLocation } from 'react-router-dom'\nimport { nationalParks } from '../ParkData'\n\nconst App: React.FC = () => {\n  const [parkCode, setParkCode] = useState<string>('')\n  const location = useLocation()\n  const choosePark = (parkCodeId: string) => {\n    setParkCode(parkCodeId)\n  }\n\n  useEffect(() => {\n    if (location.pathname === '/') {\n      generateRandomParkCode()\n      location.pathname = `/${parkCode}`\n    } else {\n      setParkCode(location.pathname.split('/')[1])\n    }\n  }, [parkCode])\n\n  const generateRandomParkCode = (): void => {\n      let index = Math.floor(Math.random() * nationalParks.length)\n      setParkCode(nationalParks[index].parkCode)\n  }\n\n  return (\n    <main className='app'>\n      <body className='body'>\n        <MainNav\n          choosePark={choosePark}\n          generateRandomParkCode={generateRandomParkCode} />\n        <Switch>\n          <Route\n            path={location.pathname}\n            render={() => {\n              return (\n                <ParkContainer\n                  parkCode={parkCode} />\n              )\n            }}\n          />\n        </Switch>\n      </body>\n      <Footer />\n    </main>\n  )\n}\n\nexport default App\n",["88","89"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Footer/Footer.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx",["90"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface FilterButtonsByName {\n  filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype NavProps = ChoosePark | LocalParkData | FilterButtonsByName | GenerateRandomParkCode\n\nconst MainNav: React.FC<NavProps> = (props) => {\n  const { choosePark } = props as ChoosePark\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const [nameSearch, setNameSearch] = useState<string>('')\n  const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>([])\n\n  useEffect(() => {\n    if (!nameSearch) {\n      createNavBtns(nationalParks)\n    }\n  }, [nameSearch])\n\n  const createNavBtns = (parks: Array<LocalParkData>): void => {\n    const parkButtons = parks.map(park => {\n      return <ParkBtn\n        key={park.parkCode}\n        name={park.name}\n        parkCode={park.parkCode}\n        choosePark={choosePark}\n      />\n    })\n    setParksOnDisplay(parkButtons)\n  }\n\n  const filterButtonsByName = (searchTerm: string) => {\n    setNameSearch(searchTerm)\n    const filteredParks = nationalParks.filter(park => {\n      return park.name.toLowerCase().includes(searchTerm.toLowerCase())\n    })\n    createNavBtns(filteredParks)\n  }\n\n  return (\n    <nav className='main-nav'>\n      <img\n        className='logo'\n        src={parkfinderLogo}\n        alt='National Parkfinder Logo'\n      />\n      <h1 className='site-header'>National Parkfinder</h1>\n      <NavSearch\n        filterButtonsByName={filterButtonsByName}\n      />\n      <ParkList\n        generateRandomParkCode={generateRandomParkCode}\n        parksOnDisplay={parksOnDisplay}\n      />\n    </nav>\n  )\n}\n\nexport default MainNav","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedParks/SavedParks.tsx",["91"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx",["92"],"import randomizeIcon from './randomize.png'\nimport './ParkList.scss'\n\ninterface ParksOnDisplay {\n  parksOnDisplay: Array<JSX.Element>\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype ParkListProps = GenerateRandomParkCode | ParksOnDisplay\n\nconst ParkList: React.FC<ParkListProps> = props => {\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const { parksOnDisplay } = props as ParksOnDisplay\n\n  return (\n    <section className=\"park-list\">\n      <button\n        className=\"randomize-button\"\n        onClick={generateRandomParkCode}>\n        <img \n          src={randomizeIcon}\n          className='randomize-icon'\n        />\n      </button>\n      {parksOnDisplay}\n    </section>\n  )\n}\n\nexport default ParkList","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx",["93"],"import { CurrentParkContainer } from '../interfaces'\nimport './Location.scss'\n\nconst Location: React.FC<CurrentParkContainer> = props => {\n  const { currentPark } = props as CurrentParkContainer\n  return (\n    <section>\n      <p><b>Driving directions to {currentPark.name}: </b>{currentPark.directionsInfo}</p>\n      <iframe\n        src={`https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d196281.64169563106!2d${currentPark.longitude}!3d${currentPark.latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1610139788967!5m2!1sen!2sus`}\n        className='map'>\n      </iframe >\n    </section>\n  )\n}\n\nexport default Location\n","/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["94"],"import './BannerIcons.scss'\nimport { useEffect, useState } from 'react'\nimport { AddRemoveFunctionality } from '../interfaces'\nimport bucketBlack from './icons/bucket-black.png'\nimport bucketGreen from './icons/bucket-green.png'\nimport checkBlack from './icons/check-black.png'\nimport checkGreen from './icons/check-green.png'\n\ntype BannerIconsProps = AddRemoveFunctionality | { localPark: () => any | void } \n\n\nconst BannerIcons: React.FC<BannerIconsProps> = props => {\n  const { addToVisited } = props as AddRemoveFunctionality\n  const { deleteFromVisited } = props as AddRemoveFunctionality\n  const { addToBucketList } = props as AddRemoveFunctionality\n  const { deleteFromBucketList } = props as AddRemoveFunctionality\n  const { localPark } = props as any\n\n  const [checkColor, setCheckColor] = useState<any>()\n  const [bucketColor, setBucketColor] = useState<any>()\n\n  useEffect(() => {\n    if (localPark.visited) {\n      setCheckColor(checkGreen)\n    } else {\n      setCheckColor(checkBlack)\n    }\n\n    if (localPark.bucketList) {\n      setBucketColor(bucketGreen)\n    } else {\n      setBucketColor(bucketBlack)\n    }\n  })\n\n  const handleVisitedPark = () => {\n    if (!localPark.visited) {\n      addToVisited(localPark.parkCode)\n      localPark.visited = true\n    } else {\n      deleteFromVisited(localPark.parkCode)\n      localPark.visited = false\n    }\n  }\n\n  const handleBucketListPark = () => {\n    if (!localPark.bucketList) {\n      addToBucketList(localPark.parkCode)\n      localPark.bucketList = true\n    } else {\n      deleteFromBucketList(localPark.parkCode)\n      localPark.bucketList = false\n    }\n  }\n\n  return (\n    <section className=\"banner-icons\">\n      <div role=\"button\"\n        onClick={ handleVisitedPark }\n        className=\"banner-btn-container\">\n        <img\n          src={checkColor}\n          alt=\"not checked\"\n          className=\"saved-icon\"\n        />\n        {!localPark.visited && <h2>Add To Visited</h2>}\n        {localPark.visited && <h2>Remove From Visited</h2>}\n      </div>\n      <div\n        role=\"button\"\n        onClick={ handleBucketListPark }\n        className=\"banner-btn-container\">\n        <img\n          src={bucketColor}\n          alt=\"not added to bucket list\"\n          className=\"saved-icon\"\n        />\n        {!localPark.bucketList && <h2>Add To Bucket List</h2>}\n        {localPark.bucketList && <h2>Remove From Bucket List</h2>}\n      </div>\n    </section>\n  )\n}\n\nexport default BannerIcons","/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedCard/SavedCard.tsx",["95"],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":23,"column":6,"nodeType":"102","endLine":23,"endColumn":16,"suggestions":"103"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"104","line":34,"column":6,"nodeType":"102","endLine":34,"endColumn":18,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"106","line":35,"column":6,"nodeType":"102","endLine":35,"endColumn":19,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":23,"column":9,"nodeType":"110","endLine":26,"endColumn":11},{"ruleId":"111","severity":1,"message":"112","line":9,"column":7,"nodeType":"110","endLine":11,"endColumn":25},{"ruleId":"100","severity":1,"message":"113","line":22,"column":3,"nodeType":"114","endLine":22,"endColumn":12,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":10,"column":44,"nodeType":"114","messageId":"118","endLine":10,"endColumn":59},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location'. Either include it or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'createNavBtns'. Either include it or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'addToBucketList', 'addToVisited', 'bucketList', 'deleteFromBucketList', 'deleteFromVisited', and 'location.pathname'. Either include them or remove the dependency array.",["123"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useEffect contains a call to 'setCheckColor'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [localPark.visited, localPark.bucketList] as a second argument to the useEffect Hook.","Identifier",["124"],"@typescript-eslint/no-unused-vars","'addToBucketList' is assigned a value but never used.","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [location, parkCode]",{"range":"133","text":"134"},"Update the dependencies array to be: [createNavBtns, nameSearch]",{"range":"135","text":"136"},"Update the dependencies array to be: [addToBucketList, addToVisited, bucketList, deleteFromBucketList, deleteFromVisited, location.pathname, visitedList]",{"range":"137","text":"138"},"Add dependencies array: [localPark.visited, localPark.bucketList]",{"range":"139","text":"140"},[718,728],"[location, parkCode]",[1048,1060],"[createNavBtns, nameSearch]",[1438,1451],"[addToBucketList, addToVisited, bucketList, deleteFromBucketList, deleteFromVisited, location.pathname, visitedList]",[1127,1127],", [localPark.visited, localPark.bucketList]"]