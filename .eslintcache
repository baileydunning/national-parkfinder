[{"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js":"1","/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx":"2","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js":"3","/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx":"4","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"5","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"6","/Users/bailey/turing/3mod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"7","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx":"8","/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx":"9","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"10","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"11","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx":"12","/Users/bailey/turing/3mod/projects/national-parkfinder/src/VisitedParks/VisitedParks.tsx":"13","/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx":"14","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx":"15","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx":"16","/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"17","/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedCard/SavedCard.tsx":"18","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Footer/Footer.tsx":"19"},{"size":323,"mtime":1610221566120,"results":"20","hashOfConfig":"21"},{"size":1359,"mtime":1610224983244,"results":"22","hashOfConfig":"21"},{"size":12707,"mtime":1610221579360,"results":"23","hashOfConfig":"21"},{"size":2117,"mtime":1610227541089,"results":"24","hashOfConfig":"21"},{"size":2559,"mtime":1610232837138,"results":"25","hashOfConfig":"21"},{"size":264,"mtime":1610160795201,"results":"26","hashOfConfig":"21"},{"size":686,"mtime":1610227876664,"results":"27","hashOfConfig":"21"},{"size":844,"mtime":1610223866659,"results":"28","hashOfConfig":"21"},{"size":589,"mtime":1610221547692,"results":"29","hashOfConfig":"21"},{"size":1633,"mtime":1610232747020,"results":"30","hashOfConfig":"21"},{"size":620,"mtime":1610221207863,"results":"31","hashOfConfig":"21"},{"size":918,"mtime":1610231639319,"results":"32","hashOfConfig":"21"},{"size":583,"mtime":1610221553809,"results":"33","hashOfConfig":"21"},{"size":666,"mtime":1610224323865,"results":"34","hashOfConfig":"21"},{"size":643,"mtime":1610224421904,"results":"35","hashOfConfig":"21"},{"size":1122,"mtime":1610221136158,"results":"36","hashOfConfig":"21"},{"size":1427,"mtime":1610233352550,"results":"37","hashOfConfig":"21"},{"size":321,"mtime":1610219766440,"results":"38","hashOfConfig":"21"},{"size":424,"mtime":1610222425463,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"2r4utd",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js",[],["86","87"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx",["88"],"import './App.scss'\nimport React, { useState, useEffect } from 'react'\nimport MainNav from '../MainNav/MainNav'\nimport ParkContainer from '../ParkContainer/ParkContainer'\nimport Footer from '../Footer/Footer'\nimport { Route, Switch, useLocation } from 'react-router-dom'\nimport { nationalParks } from '../ParkData'\n\nconst App: React.FC = () => {\n  const [parkCode, setParkCode] = useState<string>('')\n  const location = useLocation()\n  const choosePark = (parkCodeId: string) => {\n    setParkCode(parkCodeId)\n  }\n\n  useEffect(() => {\n    if (location.pathname === '/') {\n      generateRandomParkCode()\n    } else {\n      setParkCode(location.pathname.split('/')[1])\n    }\n  }, [parkCode])\n\n  const generateRandomParkCode = (): void => {\n    let index = Math.floor(Math.random() * nationalParks.length)\n    setParkCode(nationalParks[index].parkCode)\n  }\n\n  return (\n    <main className='app'>\n      <body className='body'>\n        <MainNav\n          choosePark={choosePark}\n          generateRandomParkCode={generateRandomParkCode} />\n        <Switch>\n          <Route\n            path={location.pathname}\n            render={() => {\n              return (\n                <ParkContainer\n                  parkCode={parkCode} />\n              )\n            }}\n          />\n        </Switch>\n      </body>\n      <Footer />\n    </main>\n  )\n}\n\nexport default App\n",["89","90"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx",["91","92"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\nimport { Link } from 'react-router-dom'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface FilterButtonsByName {\n  filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype NavProps = ChoosePark | LocalParkData | FilterButtonsByName | GenerateRandomParkCode\n\nconst MainNav: React.FC<NavProps> = (props) => {\n  const { choosePark } = props as ChoosePark\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const [nameSearch, setNameSearch] = useState<string>('')\n  const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>()\n\n  useEffect(() => {\n    if (!nameSearch) {\n      createNavBtns(nationalParks)\n    }\n  }, [nameSearch])\n\n  const createNavBtns = (parks: Array<LocalParkData>): void => {\n    const parkButtons = parks.map(park => {\n      return <ParkBtn\n        key={park.parkCode}\n        name={park.name}\n        parkCode={park.parkCode}\n        choosePark={choosePark}\n      />\n    })\n    setParksOnDisplay(parkButtons)\n  }\n\n  const filterButtonsByName = (searchTerm: string) => {\n    setNameSearch(searchTerm)\n    const filteredParks = nationalParks.filter(park => {\n      return park.name.toLowerCase().includes(searchTerm.toLowerCase())\n    })\n    createNavBtns(filteredParks)\n  }\n\n  return (\n    <nav className='main-nav'>\n      <img\n        className='logo'\n        src={parkfinderLogo}\n        alt='National Parkfinder Logo'\n      />\n      <h1 className='site-header'>National Parkfinder</h1>\n      <NavSearch\n        filterButtonsByName={filterButtonsByName}\n      />\n      <ParkList\n        generateRandomParkCode={generateRandomParkCode}\n        parksOnDisplay={parksOnDisplay}\n      />\n    </nav>\n  )\n}\n\nexport default MainNav","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx",["93","94"],"import randomizeIcon from './randomize.png'\nimport './ParkList.scss'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void;\n}\n\ninterface ParksOnDisplay {\n  parksOnDisplay: Array<object>\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype ParkListProps = GenerateRandomParkCode | ParksOnDisplay\n\nconst ParkList: React.FC<ParkListProps> = props => {\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const { parksOnDisplay } = props as ParksOnDisplay\n\n  return (\n    <section className=\"park-list\">\n      <button\n        className=\"randomize-button\"\n        onClick={() => generateRandomParkCode()}>\n        <img \n          src={randomizeIcon}\n          className='randomize-icon'>\n          </img>\n      </button>\n      {parksOnDisplay}\n    </section>\n  )\n}\n\nexport default ParkList","/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",["95"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx",["96"],"import './Banner.scss'\nimport { CurrentParkContainer, LocalParkContainer } from '../interfaces'\nimport BannerIcons from '../BannerIcons/BannerIcons'\n\ntype BannerIconsProps = LocalParkContainer | CurrentParkContainer | { parkCode: string }\n\nconst Banner: React.FC<BannerIconsProps> = props => {\n  const { currentPark } = props as CurrentParkContainer\n  const { images } = currentPark as any\n\n  const randomIndex = Math.floor(Math.random() * images.length)\n\n  return (\n    <section className='banner'>\n      <div className='header-container'>\n        <h1 className='header'>{currentPark.fullName}, {currentPark.states}</h1>\n        <p className='caption'><i>{images[randomIndex].caption}</i></p>\n      </div>\n      <div>\n        {<img\n          className='banner-img'\n          src={images[randomIndex].url}\n          alt={images[randomIndex].altText}\n        />}\n      </div>\n    </section>\n  )\n}\n\nexport default Banner","/Users/bailey/turing/3mod/projects/national-parkfinder/src/VisitedParks/VisitedParks.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx",["97"],"import { CurrentParkContainer } from '../interfaces'\nimport './Location.scss'\n\nconst Location: React.FC<CurrentParkContainer> = props => {\n  const { currentPark } = props as CurrentParkContainer\n  return (\n    <section>\n      <p><b>Driving directions to {currentPark.name}: </b>{currentPark.directionsInfo}</p>\n      <iframe\n        src={`https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d196281.64169563106!2d${currentPark.longitude}!3d${currentPark.latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1610139788967!5m2!1sen!2sus`}\n        className='map'>\n      </iframe >\n    </section>\n  )\n}\n\nexport default Location\n","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["98"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedCard/SavedCard.tsx",["99"],"import { LocalParkData } from '../interfaces'\n\nconst SavedCard: React.FC<LocalParkData> = (props) => {\n  const { name } = props as LocalParkData\n  const { image } = props as LocalParkData\n  // const { key } = props as LocalParkData\n\n  return (\n    <div>\n      <h1>{name}</h1>\n    </div>\n  )\n  \n}\n\nexport default SavedCard","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Footer/Footer.tsx",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":22,"column":6,"nodeType":"106","endLine":22,"endColumn":16,"suggestions":"107"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"108","severity":1,"message":"109","line":9,"column":10,"nodeType":"110","messageId":"111","endLine":9,"endColumn":14},{"ruleId":"104","severity":1,"message":"112","line":35,"column":6,"nodeType":"106","endLine":35,"endColumn":18,"suggestions":"113"},{"ruleId":"108","severity":1,"message":"114","line":4,"column":11,"nodeType":"110","messageId":"111","endLine":4,"endColumn":21},{"ruleId":"115","severity":1,"message":"116","line":27,"column":9,"nodeType":"117","endLine":29,"endColumn":38},{"ruleId":"108","severity":1,"message":"118","line":7,"column":46,"nodeType":"110","messageId":"111","endLine":7,"endColumn":59},{"ruleId":"108","severity":1,"message":"119","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":19},{"ruleId":"120","severity":1,"message":"121","line":9,"column":7,"nodeType":"117","endLine":11,"endColumn":25},{"ruleId":"108","severity":1,"message":"122","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":19},{"ruleId":"108","severity":1,"message":"123","line":5,"column":11,"nodeType":"110","messageId":"111","endLine":5,"endColumn":16},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.pathname'. Either include it or remove the dependency array.","ArrayExpression",["126"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'createNavBtns'. Either include it or remove the dependency array.",["127"],"'ChoosePark' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'LocalParkData' is defined but never used.","'BannerIcons' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'bucketGreen' is defined but never used.","'image' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [location.pathname, parkCode]",{"range":"132","text":"133"},"Update the dependencies array to be: [createNavBtns, nameSearch]",{"range":"134","text":"135"},[677,687],"[location.pathname, parkCode]",[1086,1098],"[createNavBtns, nameSearch]"]