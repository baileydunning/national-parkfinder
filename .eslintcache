[{"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js":"1","/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx":"2","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js":"3","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Footer/Footer.tsx":"4","/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx":"5","/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedParks/SavedParks.tsx":"6","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"7","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"8","/Users/bailey/turing/3mod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"9","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx":"10","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"11","/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedCard/SavedCard.tsx":"12","/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx":"13","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"14","/Users/bailey/turing/3mod/projects/national-parkfinder/src/StateDropdown/StateDropdown.tsx":"15","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx":"16","/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx":"17","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx":"18","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx":"19","/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"20"},{"size":269,"mtime":1611863458354,"results":"21","hashOfConfig":"22"},{"size":5645,"mtime":1611874473380,"results":"23","hashOfConfig":"22"},{"size":15836,"mtime":1611863458348,"results":"24","hashOfConfig":"22"},{"size":518,"mtime":1610472195885,"results":"25","hashOfConfig":"22"},{"size":2476,"mtime":1611874193245,"results":"26","hashOfConfig":"22"},{"size":1788,"mtime":1611863458352,"results":"27","hashOfConfig":"22"},{"size":1857,"mtime":1611947169895,"results":"28","hashOfConfig":"22"},{"size":208,"mtime":1611947148884,"results":"29","hashOfConfig":"22"},{"size":684,"mtime":1610494900968,"results":"30","hashOfConfig":"22"},{"size":836,"mtime":1610399277049,"results":"31","hashOfConfig":"22"},{"size":536,"mtime":1611874049651,"results":"32","hashOfConfig":"22"},{"size":1471,"mtime":1611874594629,"results":"33","hashOfConfig":"22"},{"size":604,"mtime":1611863458353,"results":"34","hashOfConfig":"22"},{"size":1919,"mtime":1611863458349,"results":"35","hashOfConfig":"22"},{"size":3251,"mtime":1611863458352,"results":"36","hashOfConfig":"22"},{"size":1974,"mtime":1611876354826,"results":"37","hashOfConfig":"22"},{"size":684,"mtime":1610303893218,"results":"38","hashOfConfig":"22"},{"size":1274,"mtime":1611874049650,"results":"39","hashOfConfig":"22"},{"size":729,"mtime":1611874049650,"results":"40","hashOfConfig":"22"},{"size":2539,"mtime":1611874049648,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"2r4utd",{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js",[],["88","89"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx",["90","91","92","93","94"],"import React, { useState, useEffect } from 'react'\nimport MainNav from '../MainNav/MainNav'\nimport ParkContainer from '../ParkContainer/ParkContainer'\nimport SavedParks from '../SavedParks/SavedParks'\nimport Footer from '../Footer/Footer'\nimport { Route, Switch, useLocation, useHistory } from 'react-router-dom'\nimport { nationalParks } from '../ParkData'\nimport './App.scss'\nimport { LocalParkContainer } from '../interfaces'\n\nconst App: React.FC<LocalParkContainer> = () => {\n  const [visitedList, setVisitedList] = useState<LocalParkContainer[] | any>([])\n  const [bucketList, setBucketList] = useState<LocalParkContainer[] | any>([])\n  const location = useLocation()\n  const history = useHistory()\n  \n  useEffect(() => {\n    retrieveFromStorage()\n  }, [])\n\n  useEffect(() => {\n    if (location.pathname === '/') {\n      generateRandomParkCode()\n    } \n  }, [location.pathname])\n\n  useEffect(() => {\n    updateLocalVisitedParks()\n    updateLocalBucketListParks()\n    saveToStorage()\n  }, [visitedList, bucketList])\n\n  const generateRandomParkCode = (): void => {\n    let index = Math.floor(Math.random() * nationalParks.length)\n    history.push(`/park/${nationalParks[index].parkCode}/about`)\n  }\n\n  const findChosenPark = (parkCode: string): any | void => {\n    const chosenPark = nationalParks.find(park => {\n      return park.parkCode === parkCode\n    })\n    if (chosenPark) {\n      return chosenPark\n    }\n  }\n\n  const addToVisited = (parkCode: string) => {\n    const addedPark = findChosenPark(parkCode)\n    addedPark.visited = true\n    if (!visitedList.includes(addedPark)) {\n      setVisitedList([...visitedList, addedPark])\n    }\n  }\n\n  const deleteFromVisited = (parkCode: string) => {\n    const removedPark = findChosenPark(parkCode)\n    removedPark.visited = false\n    const updatedParks = visitedList.filter((park: any) => park.parkCode !== parkCode)\n    setVisitedList(updatedParks)\n  }\n\n  const addToBucketList = (parkCode: string) => {\n    const addedPark = findChosenPark(parkCode)\n    addedPark.bucketList = true\n    if (!bucketList.includes(addedPark)) {\n      setBucketList([...bucketList, addedPark])\n    }\n  }\n\n  const deleteFromBucketList = (parkCode: string) => {\n    const removedPark = findChosenPark(parkCode)\n    removedPark.bucketList = false\n    const updatedParks = bucketList.filter((park: any) => park.parkCode !== parkCode)\n    setBucketList(updatedParks)\n  }\n\n  const saveToStorage = () => {\n    localStorage.clear()\n    let stringifiedVisited = JSON.stringify(visitedList)\n    let stringifiedBucketList = JSON.stringify(bucketList)\n    localStorage.setItem('visitedList', stringifiedVisited)\n    localStorage.setItem('bucketList', stringifiedBucketList)\n  }\n\n  const retrieveFromStorage = () => {\n    if (localStorage.visitedList) {\n      const storedVisited: any = localStorage.getItem('visitedList')\n      const parsedVisited = JSON.parse(storedVisited)\n      setVisitedList(parsedVisited)\n    }\n    if (localStorage.bucketList) {\n      const storedBucketList: any = localStorage.getItem('bucketList')\n      const parsedBucketList = JSON.parse(storedBucketList)\n      setBucketList(parsedBucketList)\n    }\n    saveToStorage()\n  }\n\n  const updateLocalVisitedParks = () => {\n    if (localStorage.visitedList) {\n      return nationalParks.map(park => {\n        visitedList.forEach(visitedPark => {\n          if (visitedPark.parkCode === park.parkCode) {\n            return park.visited = true\n          }\n        })\n      }) \n    }\n  }\n\n  const updateLocalBucketListParks = () => {\n    if (localStorage.bucketList) {\n      return nationalParks.map(park => {\n        bucketList.forEach(bucketListPark => {\n          if (bucketListPark.parkCode === park.parkCode) {\n            return park.bucketList = true\n          }\n        })\n      })\n    }\n  }\n\n  return (\n    <main className='app'>\n      <section className='body'>\n        <MainNav\n          generateRandomParkCode={generateRandomParkCode} />\n        <Switch>\n          <Route\n            path='/park/:parkCode'\n            render={({ match }) => {\n               return (\n                <ParkContainer\n                  parkCode={match.params.parkCode}\n                  visitedList={visitedList}\n                  bucketList={bucketList}\n                  findChosenPark={findChosenPark}\n                  addToVisited={addToVisited}\n                  deleteFromVisited={deleteFromVisited}\n                  addToBucketList={addToBucketList}\n                  deleteFromBucketList={deleteFromBucketList}\n                />\n              )\n            }}\n          />\n          <Route\n            path='/user/visited'\n            render={() => {\n              return (\n                <SavedParks\n                  visitedList={visitedList}\n                  bucketList={bucketList}\n                  addToVisited={addToVisited}\n                  deleteFromVisited={deleteFromVisited}\n                  addToBucketList={addToBucketList}\n                  deleteFromBucketList={deleteFromBucketList}\n                />\n              )\n            }}\n          />\n          <Route\n            path='/user/bucket-list'\n            render={() => {\n              return (\n                <SavedParks\n                  visitedList={visitedList}\n                  bucketList={bucketList}\n                  addToVisited={addToVisited}\n                  deleteFromVisited={deleteFromVisited}\n                  addToBucketList={addToBucketList}\n                  deleteFromBucketList={deleteFromBucketList}\n                />\n              )\n            }}\n          />\n        </Switch>\n      </section>\n      <Footer />\n    </main>\n  )\n}\n\nexport default App\n",["95","96"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Footer/Footer.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx",["97"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\nimport StateDropdown from '../StateDropdown/StateDropdown';\n\ninterface FilterButtonsByName {\n  filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype NavProps = LocalParkData | FilterButtonsByName | GenerateRandomParkCode | {filterButtons: () => void}\n\nconst MainNav: React.FC<NavProps> = (props) => {\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const [nameSearch, setNameSearch] = useState<string>('')\n  const [stateSelection, setStateSelection] = useState<string>('')\n  const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>([])\n\n  useEffect(() => {\n    filterButtons(nameSearch, stateSelection)\n  }, [nameSearch, stateSelection])\n\n  const createNavBtns = (parks: Array<LocalParkData>): void => {\n    const parkButtons = parks.map(park => {\n      return <ParkBtn\n        key={park.parkCode}\n        name={park.name}\n        image={park.image}\n        state={park.state}\n        parkCode={park.parkCode}\n      />\n    })\n    setParksOnDisplay(parkButtons)\n  }\n\n  const setSearch = (searchTerm: string) => {\n    setNameSearch(searchTerm)\n  }\n\n   const setStateSelect = (stateSelection: string) => {\n    setStateSelection(stateSelection)\n  }\n\n  const filterButtons = (searchTerm: string, stateSelection: string) => {\n    setNameSearch(searchTerm)\n    setStateSelection(stateSelection)\n    const filteredParks = nationalParks.filter(park => {\n      return park.name.toLowerCase().includes(searchTerm.toLowerCase()) && park.state.includes(stateSelection)\n    })\n\n    createNavBtns(filteredParks)\n  }\n\n  return (\n    <nav className='main-nav'>\n      <img\n        className='logo'\n        src={parkfinderLogo}\n        alt='National Parkfinder Logo'\n        onClick={() => generateRandomParkCode()}\n      />\n      <h1 className='site-header'>National Parkfinder</h1>\n      <NavSearch setSearch={setSearch}/>\n      <StateDropdown setStateSelect={setStateSelect}/>\n      <ParkList\n        generateRandomParkCode={generateRandomParkCode}\n        parksOnDisplay={parksOnDisplay}\n      />\n    </nav>\n  )\n}\n\nexport default MainNav","/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedParks/SavedParks.tsx",["98"],"import { useEffect, useState } from 'react'\nimport { LocalParkContainer, LocalParkData, AddRemoveFunctionality } from '../interfaces'\nimport SavedCard from '../SavedCard/SavedCard'\nimport { useLocation } from 'react-router-dom'\nimport './SavedParks.scss'\n\ntype SavedParksProps = LocalParkContainer & AddRemoveFunctionality\n\nconst SavedParks: React.FC<SavedParksProps> = props => {\n  const [pageTitle, setPageTitle] = useState<string>('')\n  const location = useLocation()\n  const [parkList, setParkList] = useState<Array<any>>([])\n  const { visitedList, bucketList } = props as LocalParkContainer\n  const { addToVisited, deleteFromVisited, addToBucketList, deleteFromBucketList } = props as AddRemoveFunctionality\n\n  useEffect(() => {\n    if (location.pathname === '/user/visited') {\n      setParkList(visitedList)\n      setPageTitle('My Visited Parks')\n    } else if (location.pathname === '/user/bucket-list') {\n      setParkList(bucketList)\n      setPageTitle('My Bucket List Parks')\n    }\n  })\n  \n  const createCards = () => {\n    return parkList.map((savedPark: LocalParkData) => {\n      return <SavedCard\n        key={savedPark.parkCode}\n        name={savedPark.name}\n        image={savedPark.image}\n        parkCode={savedPark.parkCode}\n        state={savedPark.state}\n        bucketList={savedPark.bucketList}\n        visited={savedPark.visited}\n        addToVisited={addToVisited}\n        deleteFromVisited={deleteFromVisited}\n        addToBucketList={addToBucketList}\n        deleteFromBucketList={deleteFromBucketList}\n      />\n    })\n  }\n\n  return (\n    <section>\n      <h1 style={{textAlign: \"center\"}}>\n        {pageTitle}\n      </h1>\n      <section className=\"saved-parks-container\">\n        { createCards() }\n      </section>\n    </section>\n  )\n}\n\nexport default SavedParks","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/SavedCard/SavedCard.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/StateDropdown/StateDropdown.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx",["99"],"import './Banner.scss'\nimport { CurrentParkContainer, LocalParkContainer } from '../interfaces'\nimport { useEffect, useState } from 'react'\ntype BannerIconsProps = LocalParkContainer | CurrentParkContainer | { parkCode: string }\n\nconst Banner: React.FC<BannerIconsProps> = props => {\n  const { currentPark } = props as CurrentParkContainer\n  const { images } = currentPark as any\n  const [imageIndex, setImageIndex] = useState<number>(0)\n  const [numImages, setNumImages] = useState<number>(images.length - 1)\n  const [displayImage, setDisplayImage] = useState(images[imageIndex])\n\n  useEffect(() => {\n    setImageIndex(0)\n    setDisplayImage(images[imageIndex])\n    setNumImages(images.length - 1)\n  }, [currentPark])\n\n  useEffect(() => {\n    setDisplayImage(images[imageIndex])\n  }, [imageIndex, images])\n\n  const navigateToImage = (index: number) => {\n    setImageIndex(index)\n  }\n\n  const returnFullName = () => {\n    if (currentPark.parkCode === 'hale') {\n      return 'Haleakala National Park'\n    } else {\n      return currentPark.fullName\n    }\n  }\n\n  return (\n    <section className='banner'>\n      <div className='header-container'>\n        <h1 className='header'>{returnFullName()}, {currentPark.states}</h1>\n        {displayImage && <p className='caption'>\n          {displayImage.caption}\n        </p>}\n      </div>\n      <div className='image-container'>\n        {imageIndex > 0 &&\n          <button \n            onClick={() => navigateToImage(imageIndex - 1)}\n            className='nav-img-btn'>\n            ❮\n          </button>}\n        {displayImage && <img\n          className='banner-img'\n          data-testid='banner-img'\n          src={displayImage.url}\n          alt={displayImage.altText}\n        />}\n        {imageIndex !== numImages &&\n          <button\n            onClick={() => navigateToImage(imageIndex + 1)}\n            className='nav-img-btn'>\n            ❯\n          </button>}\n      </div>\n    </section>\n  )\n}\n\nexport default Banner","/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":19,"column":6,"nodeType":"106","endLine":19,"endColumn":8,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":25,"column":6,"nodeType":"106","endLine":25,"endColumn":25,"suggestions":"109"},{"ruleId":"104","severity":1,"message":"110","line":31,"column":6,"nodeType":"106","endLine":31,"endColumn":31,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":101,"column":37,"nodeType":"114","messageId":"115","endLine":101,"endColumn":39},{"ruleId":"112","severity":1,"message":"113","line":113,"column":37,"nodeType":"114","messageId":"115","endLine":113,"endColumn":39},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"116","line":29,"column":6,"nodeType":"106","endLine":29,"endColumn":34,"suggestions":"117"},{"ruleId":"104","severity":1,"message":"118","line":16,"column":3,"nodeType":"119","endLine":16,"endColumn":12,"suggestions":"120"},{"ruleId":"104","severity":1,"message":"121","line":17,"column":6,"nodeType":"106","endLine":17,"endColumn":19,"suggestions":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'retrieveFromStorage'. Either include it or remove the dependency array.","ArrayExpression",["125"],"React Hook useEffect has a missing dependency: 'generateRandomParkCode'. Either include it or remove the dependency array.",["126"],"React Hook useEffect has missing dependencies: 'saveToStorage', 'updateLocalBucketListParks', and 'updateLocalVisitedParks'. Either include them or remove the dependency array.",["127"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'filterButtons'. Either include it or remove the dependency array.",["128"],"React Hook useEffect contains a call to 'setParkList'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [location.pathname, visitedList, bucketList] as a second argument to the useEffect Hook.","Identifier",["129"],"React Hook useEffect has missing dependencies: 'imageIndex' and 'images'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDisplayImage' needs the current value of 'imageIndex'.",["130"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [retrieveFromStorage]",{"range":"143","text":"144"},"Update the dependencies array to be: [generateRandomParkCode, location.pathname]",{"range":"145","text":"146"},"Update the dependencies array to be: [visitedList, bucketList, updateLocalVisitedParks, updateLocalBucketListParks, saveToStorage]",{"range":"147","text":"148"},"Update the dependencies array to be: [filterButtons, nameSearch, stateSelection]",{"range":"149","text":"150"},"Add dependencies array: [location.pathname, visitedList, bucketList]",{"range":"151","text":"152"},"Update the dependencies array to be: [currentPark, imageIndex, images]",{"range":"153","text":"154"},[757,759],"[retrieveFromStorage]",[862,881],"[generateRandomParkCode, location.pathname]",[992,1017],"[visitedList, bucketList, updateLocalVisitedParks, updateLocalBucketListParks, saveToStorage]",[1062,1090],"[filterButtons, nameSearch, stateSelection]",[995,995],", [location.pathname, visitedList, bucketList]",[704,717],"[currentPark, imageIndex, images]"]