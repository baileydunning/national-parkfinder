[{"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js":"1","/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx":"2","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js":"3","/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx":"4","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"5","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"6","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx":"7","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"8","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx":"9","/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx":"10","/Users/bailey/turing/3mod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"11","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"12","/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"13","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx":"14","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx":"15","/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx":"16"},{"size":322,"mtime":1610138614066,"results":"17","hashOfConfig":"18"},{"size":1195,"mtime":1610138614061,"results":"19","hashOfConfig":"18"},{"size":11659,"mtime":1610067659096,"results":"20","hashOfConfig":"18"},{"size":2118,"mtime":1610139101241,"results":"21","hashOfConfig":"18"},{"size":1627,"mtime":1610140680803,"results":"22","hashOfConfig":"18"},{"size":264,"mtime":1610067659096,"results":"23","hashOfConfig":"18"},{"size":531,"mtime":1610138614064,"results":"24","hashOfConfig":"18"},{"size":638,"mtime":1610138614063,"results":"25","hashOfConfig":"18"},{"size":593,"mtime":1610067659094,"results":"26","hashOfConfig":"18"},{"size":663,"mtime":1610138614065,"results":"27","hashOfConfig":"18"},{"size":862,"mtime":1610138614062,"results":"28","hashOfConfig":"18"},{"size":1231,"mtime":1610140847432,"results":"29","hashOfConfig":"18"},{"size":895,"mtime":1610057039939,"results":"30","hashOfConfig":"18"},{"size":735,"mtime":1610140348165,"results":"31","hashOfConfig":"18"},{"size":126,"mtime":1610057039940,"results":"32","hashOfConfig":"18"},{"size":404,"mtime":1610139120305,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"2r4utd",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js",[],["75","76"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx",["77","78"],"import './App.scss'\nimport React, { useState, useEffect } from 'react'\nimport MainNav from '../MainNav/MainNav'\nimport ParkContainer from '../ParkContainer/ParkContainer'\nimport { Route, Switch, useLocation } from 'react-router-dom'\nimport { nationalParks } from '../ParkData'\nimport { parkRequest } from '../ParkContainer/npsApiCall'\n\nconst App: React.FC = () => {\n  const [parkCode, setParkCode] = useState('')\n  const location = useLocation()\n  const choosePark = (parkCodeId: string) => {\n   setParkCode(parkCodeId)\n  }\n\n  useEffect(() => {\n    if (location.pathname === '/') {\n      generateRandomParkCode()\n    } else {\n      setParkCode(location.pathname.split('/')[1])\n    }\n  }, [parkCode])\n\n  const generateRandomParkCode = () => {\n    let index = Math.floor(Math.random() * nationalParks.length)\n    setParkCode(nationalParks[index].parkCode)\n  }\n\n  return (\n    <main className=\"body\">\n      <MainNav choosePark={choosePark}/>\n      <Switch>\n        <Route\n          path={location.pathname}\n          render={ () => {\n            return (\n              <ParkContainer parkCode={parkCode}/>\n            )\n          }}\n        />\n      </Switch>\n    </main>\n  )\n}\n\nexport default App\n",["79","80"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx",["81","82"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface FilterButtonsByName {\n  filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface ParksOnDisplay {\n  parks: Array<LocalParkData>\n}\n\ntype NavProps = ChoosePark | LocalParkData | FilterButtonsByName\n\nconst MainNav: React.FC<NavProps> = (props) => {\n  const { choosePark } = props as ChoosePark\n  const [nameSearch, setNameSearch] = useState<string>('')\n  const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>()\n\n  useEffect(() => {\n    if (!nameSearch) {\n      createNavBtns(nationalParks)\n    }\n  }, [nameSearch])\n\n  const createNavBtns = (parks: Array<LocalParkData>): void => {\n    const parkButtons = parks.map(park => {\n      return <ParkBtn\n        key={park.parkCode}\n        name={park.name}\n        parkCode={park.parkCode}\n        choosePark={choosePark}\n      />\n    })\n    setParksOnDisplay(parkButtons)\n  }\n\n  const filterButtonsByName = (searchTerm: string) => {\n    setNameSearch(searchTerm)\n    const filteredParks = nationalParks.filter(park => {\n      return park.name.toLowerCase().includes(searchTerm.toLowerCase())\n    })\n    createNavBtns(filteredParks)\n  }\n\n  return (\n    <nav className=\"main-nav\">\n      <img\n        className=\"logo\"\n        src={parkfinderLogo}\n        alt=\"National Parkfinder Logo\"\n      />\n      <h1>National Parkfinder</h1>\n      <NavSearch\n        filterButtonsByName={filterButtonsByName}\n      />\n      <ParkList\n        choosePark={choosePark}\n        parksOnDisplay={parksOnDisplay}\n      />\n      <div className=\"main-nav-saved-btn-container\">\n        <button className=\"main-nav-saved-btn\">Visited</button>\n        <button className=\"main-nav-saved-btn\">Bucket List</button>\n      </div>\n    </nav>\n  )\n}\n\nexport default MainNav","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",["83","84"],"import { useState, useEffect, Fragment } from 'react'\nimport Banner from '../Banner/Banner'\nimport UserNav from '../UserNav/UserNav'\nimport ParkInfo from '../ParkInfo/ParkInfo'\nimport SavedParks from '../SavedParks/SavedParks'\nimport { ParkCode, CurrentPark } from '../interfaces'\nimport { parkRequest } from './npsApiCall'\nimport { Switch, Route } from 'react-router-dom'\nimport './ParkContainer.scss'\nimport { nationalParks } from '../ParkData'\n\n\ntype ParkContainerProps = ParkCode | CurrentPark\n\nconst ParkContainer: React.FC<ParkContainerProps> = props => {\n\n  const [currentPark, setCurrentPark] = useState<CurrentPark>()\n  const { parkCode } = props as ParkCode\n  \n  useEffect(() => {\n    if (parkCode !== '') {\n      parkRequest(parkCode)\n      .then(data => {\n        setCurrentPark(data.data[0])\n      })    \n      .catch(error => setCurrentPark(error.message))\n    } \n  }, [parkCode])\n\n  return (\n    <section>\n      {currentPark && \n        <Switch>\n          <Fragment>\n            <Banner \n              currentPark={currentPark} />\n            <UserNav \n              currentPark={currentPark} />\n            <Route \n              path={`/${currentPark.parkCode}`}\n              render={() => {\n                return (\n                  <ParkInfo \n                  currentPark={currentPark} />\n                )\n              }}\n            />\n              {/* <Route\n                path='/:savedParks'\n                render={props => {\n                  <SavedParks />\n                }}\n              /> */}\n          </Fragment>\n        </Switch>\n      }\n    </section>\n  )\n}\n\nexport default ParkContainer","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx",["85"],"import './ParkList.scss'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void;\n}\n\ninterface ParksOnDisplay {\n   parksOnDisplay: Array<object>\n}\n\ntype ParkListProps = ChoosePark | ParksOnDisplay\n\nconst ParkList: React.FC<ParkListProps> = props => {\n  const { choosePark } = props as ChoosePark\n  const { parksOnDisplay } = props as ParksOnDisplay\n\n  return (\n    <section className=\"park-list\">\n      <button className=\"park-button\">randomize</button>\n      {parksOnDisplay}\n    </section>\n  )\n}\n\nexport default ParkList","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",["86","87"],"import React, { useState, FormEvent } from 'react'\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom'\nimport './NavSearch.scss'\n\ninterface FilterButtonsByName {\n    filterButtonsByName: (searchTerm: string) => void\n}\n\nconst NavSearch: React.FC<FilterButtonsByName> = (props) => {\n    const [nameSearch, setNameSearch] = useState<string>('')\n\n    const handleSearchChange = (event: any) => {\n        setNameSearch(event.target.value)\n        console.log(event.target.value)\n        props.filterButtonsByName(event.currentTarget.value)\n    }\n\n    return(\n        <form\n            className='nav-search'\n        >\n            <input\n                placeholder='search by name'\n                value={nameSearch}\n                onChange={handleSearchChange}\n                name=\"name\"\n            />\n        </form>\n    )\n}\n\nexport default NavSearch","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["88","89"],"import './BannerIcons.scss'\nimport bucketBlack from './icons/bucket-black.png'\nimport bucketGreen from './icons/bucket-green.png'\nimport checkBlack from './icons/check-black.png'\nimport checkGreen from './icons/check-green.png'\n\nfunction BannerIcons() {\n    return (\n        <section className=\"banner-icons\">\n            <div className=\"banner-btn-container\">\n            <img \n                src={checkBlack}\n                alt=\"not checked\"\n                className=\"saved-icon\"\n            />\n            <h2>Add To Visited</h2>\n            </div>\n            <div className=\"banner-btn-container\">\n                <img\n                    src={bucketBlack}\n                    alt=\"not added to bucket list\"\n                    className=\"saved-icon\"\n                />\n                <h2>Add To Bucket List</h2>\n            </div>\n        </section>\n    )\n}\n\nexport default BannerIcons","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx",["90"],"import { CurrentParkContainer } from '../interfaces'\nimport './Location.scss'\n\nconst Location: React.FC<CurrentParkContainer> = props => {\n  const { currentPark } = props as CurrentParkContainer \n  console.log(currentPark)\n  console.log('helllo')\n    return (\n      <section>\n        <p><b>Driving directions to {currentPark.name}: </b>{currentPark.directions}</p>\n        <iframe \n            src={`https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d196281.64169563106!2d${currentPark.longitude}!3d${currentPark.latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1610139788967!5m2!1sen!2sus`} \n            width = \"600\" height = \"450\">\n        </iframe >\n      </section>\n      \n    )\n}\n\nexport default Location\n","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":7,"column":10,"nodeType":"97","messageId":"98","endLine":7,"endColumn":21},{"ruleId":"99","severity":1,"message":"100","line":22,"column":6,"nodeType":"101","endLine":22,"endColumn":16,"suggestions":"102"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"103","line":18,"column":11,"nodeType":"97","messageId":"98","endLine":18,"endColumn":25},{"ruleId":"99","severity":1,"message":"104","line":33,"column":6,"nodeType":"101","endLine":33,"endColumn":18,"suggestions":"105"},{"ruleId":"95","severity":1,"message":"106","line":5,"column":8,"nodeType":"97","messageId":"98","endLine":5,"endColumn":18},{"ruleId":"95","severity":1,"message":"107","line":10,"column":10,"nodeType":"97","messageId":"98","endLine":10,"endColumn":23},{"ruleId":"95","severity":1,"message":"108","line":14,"column":11,"nodeType":"97","messageId":"98","endLine":14,"endColumn":21},{"ruleId":"95","severity":1,"message":"109","line":1,"column":27,"nodeType":"97","messageId":"98","endLine":1,"endColumn":36},{"ruleId":"95","severity":1,"message":"110","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":45},{"ruleId":"95","severity":1,"message":"111","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":19},{"ruleId":"95","severity":1,"message":"112","line":5,"column":8,"nodeType":"97","messageId":"98","endLine":5,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":11,"column":9,"nodeType":"115","endLine":13,"endColumn":42},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"@typescript-eslint/no-unused-vars","'parkRequest' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.pathname'. Either include it or remove the dependency array.","ArrayExpression",["118"],"'ParksOnDisplay' is defined but never used.","React Hook useEffect has a missing dependency: 'createNavBtns'. Either include it or remove the dependency array.",["119"],"'SavedParks' is defined but never used.","'nationalParks' is defined but never used.","'choosePark' is assigned a value but never used.","'FormEvent' is defined but never used.","'unstable_renderSubtreeIntoContainer' is defined but never used.","'bucketGreen' is defined but never used.","'checkGreen' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [location.pathname, parkCode]",{"range":"124","text":"125"},"Update the dependencies array to be: [createNavBtns, nameSearch]",{"range":"126","text":"127"},[688,698],"[location.pathname, parkCode]",[937,949],"[createNavBtns, nameSearch]"]