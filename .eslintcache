[{"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/index.js":"1","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/App/App.tsx":"2","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkData.js":"3","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/MainNav/MainNav.tsx":"4","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"5","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"6","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Banner/Banner.tsx":"7","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkList/ParkList.tsx":"8","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"9","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"10","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/UserNav/UserNav.tsx":"11","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"12","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/About/About.tsx":"13","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Location/Location.tsx":"14","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Contact/Contact.tsx":"15","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"16"},{"size":322,"mtime":1610150306610,"results":"17","hashOfConfig":"18"},{"size":1195,"mtime":1610150306602,"results":"19","hashOfConfig":"18"},{"size":11659,"mtime":1610063548619,"results":"20","hashOfConfig":"18"},{"size":2118,"mtime":1610150306605,"results":"21","hashOfConfig":"18"},{"size":1627,"mtime":1610150306606,"results":"22","hashOfConfig":"18"},{"size":264,"mtime":1610063548618,"results":"23","hashOfConfig":"18"},{"size":593,"mtime":1610150306604,"results":"24","hashOfConfig":"18"},{"size":531,"mtime":1610150306608,"results":"25","hashOfConfig":"18"},{"size":638,"mtime":1610150306606,"results":"26","hashOfConfig":"18"},{"size":1300,"mtime":1610150306607,"results":"27","hashOfConfig":"18"},{"size":663,"mtime":1610150306609,"results":"28","hashOfConfig":"18"},{"size":895,"mtime":1609899597348,"results":"29","hashOfConfig":"18"},{"size":645,"mtime":1610150888206,"results":"30","hashOfConfig":"18"},{"size":681,"mtime":1610150306605,"results":"31","hashOfConfig":"18"},{"size":799,"mtime":1610150306604,"results":"32","hashOfConfig":"18"},{"size":862,"mtime":1610150306606,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1agcvs0",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/index.js",[],["74","75"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/App/App.tsx",["76","77"],"import './App.scss'\nimport React, { useState, useEffect } from 'react'\nimport MainNav from '../MainNav/MainNav'\nimport ParkContainer from '../ParkContainer/ParkContainer'\n// import { Route } from 'react-router-dom'\nimport { nationalParks } from '../ParkData'\nimport { parkRequest } from '../ParkContainer/npsApiCall'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface Park {\n  parkCode: string;\n}\n\nconst App: React.FC = () => {\n  const [parkCode, setParkCode] = useState('')\n  \n  const choosePark = (parkCodeId: string) => {\n   setParkCode(parkCodeId)\n  }\n\n  const generateRandomParkCode = () => {\n    let index = Math.floor(Math.random() * nationalParks.length)\n    setParkCode(nationalParks[index].parkCode)\n  }\n\n  useEffect(() => {\n    if (parkCode === '') {\n      generateRandomParkCode()\n    }\n  }, [parkCode])\n\n  return (\n    <main className=\"body\">\n      <MainNav choosePark={choosePark}/>\n      <ParkContainer parkCode={parkCode}/>\n    </main>\n  )\n}\n\nexport default App\n",["78","79"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkData.js",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/MainNav/MainNav.tsx",["80"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface FilterButtonsByName {\n    filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface ParksOnDisplay {\n    parks: Array<LocalParkData>\n}\n\ntype NavProps = ChoosePark | LocalParkData | FilterButtonsByName\n\nconst MainNav: React.FC<NavProps> = (props) => {\n    const { choosePark } = props as ChoosePark\n    const [nameSearch, setNameSearch] = useState<string>('')\n    const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>()\n\n    useEffect(() => {\n        if (!nameSearch) {\n            createNavBtns(nationalParks)\n        }\n    }, [nameSearch])\n\n    const createNavBtns = (parks: Array<LocalParkData>): void => {\n        const parkButtons = parks.map(park => {\n            return <ParkBtn\n                key={park.parkCode}\n                name={park.name}\n                parkCode={park.parkCode}\n                choosePark={choosePark}\n            />\n        })\n        setParksOnDisplay(parkButtons)\n    }\n\n    const filterButtonsByName = (searchTerm: string) => {\n        setNameSearch(searchTerm)\n            const filteredParks = nationalParks.filter(park => {\n            return park.name.toLowerCase().includes(searchTerm.toLowerCase())\n        })\n            createNavBtns(filteredParks)\n    }\n\n    return (\n        <nav className=\"main-nav\">\n            <img \n                className=\"logo\"\n                src={parkfinderLogo}\n                alt=\"National Parkfinder Logo\"\n            />\n            <h1>National Parkfinder</h1>\n            <NavSearch \n                filterButtonsByName={filterButtonsByName}\n            />\n            <ParkList \n                choosePark={choosePark}\n                parksOnDisplay={parksOnDisplay} \n            />\n            <div className=\"main-nav-saved-btn-container\">\n                <button className=\"main-nav-saved-btn\">Visited</button>\n                <button className=\"main-nav-saved-btn\">Bucket List</button>\n            </div>\n        </nav>\n    )\n}\n\nexport default MainNav","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",["81"],"import { useState, useEffect, Fragment } from 'react'\nimport Banner from '../Banner/Banner'\nimport UserNav from '../UserNav/UserNav'\nimport ParkInfo from '../ParkInfo/ParkInfo'\nimport SavedParks from '../SavedParks/SavedParks'\nimport { ParkCode, CurrentPark } from '../interfaces'\nimport { parkRequest } from './npsApiCall'\nimport { Switch, Route } from 'react-router-dom'\nimport './ParkContainer.scss'\nimport { nationalParks } from '../ParkData'\n\n\ntype ParkContainerProps = ParkCode | CurrentPark\n\nconst ParkContainer: React.FC<ParkContainerProps> = props => {\n\n  const [currentPark, setCurrentPark] = useState<CurrentPark>()\n  const { parkCode } = props as ParkCode\n  \n  useEffect(() => {\n    if (parkCode !== '') {\n      parkRequest(parkCode)\n      .then(data => {\n        setCurrentPark(data.data[0])\n      })    \n      .catch(error => setCurrentPark(error.message))\n    } \n  }, [parkCode])\n\n  return (\n    <section>\n      {currentPark && \n        <Switch>\n          <Fragment>\n            <Banner \n              currentPark={currentPark} />\n            <UserNav \n              currentPark={currentPark} />\n            <Route\n              exact \n              path='/:matchedCode/about'\n              render={({match}) => {\n                const matchedCode = nationalParks.find(park => {\n                  return park.parkCode === match.params.parkCode})\n                  console.log(matchedCode)\n                return (\n                  <ParkInfo \n                  currentPark={currentPark} />\n                )\n              }}\n            />\n              {/* <Route\n                path='/:savedParks'\n                render={props => {\n                  <SavedParks />\n                }}\n              /> */}\n          </Fragment>\n        </Switch>\n      }\n    </section>\n  )\n}\n\nexport default ParkContainer","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Banner/Banner.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkList/ParkList.tsx",["82"],"import './ParkList.scss'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void;\n}\n\ninterface ParksOnDisplay {\n   parksOnDisplay: Array<object>\n}\n\ntype ParkListProps = ChoosePark | ParksOnDisplay\n\nconst ParkList: React.FC<ParkListProps> = props => {\n  const { choosePark } = props as ChoosePark\n  const { parksOnDisplay } = props as ParksOnDisplay\n\n  return (\n    <section className=\"park-list\">\n      <button className=\"park-button\">randomize</button>\n      {parksOnDisplay}\n    </section>\n  )\n}\n\nexport default ParkList","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["83","84"],"import './BannerIcons.scss'\nimport bucketBlack from './icons/bucket-black.png'\nimport bucketGreen from './icons/bucket-green.png'\nimport checkBlack from './icons/check-black.png'\nimport checkGreen from './icons/check-green.png'\n\nfunction BannerIcons() {\n    return (\n        <section className=\"banner-icons\">\n            <div className=\"banner-btn-container\">\n            <img \n                src={checkBlack}\n                alt=\"not checked\"\n                className=\"saved-icon\"\n            />\n            <h2>Add To Visited</h2>\n            </div>\n            <div className=\"banner-btn-container\">\n                <img\n                    src={bucketBlack}\n                    alt=\"not added to bucket list\"\n                    className=\"saved-icon\"\n                />\n                <h2>Add To Bucket List</h2>\n            </div>\n        </section>\n    )\n}\n\nexport default BannerIcons","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/About/About.tsx",["85"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Location/Location.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",["86","87"],"import React, { useState, FormEvent } from 'react'\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom'\nimport './NavSearch.scss'\n\ninterface FilterButtonsByName {\n    filterButtonsByName: (searchTerm: string) => void\n}\n\nconst NavSearch: React.FC<FilterButtonsByName> = (props) => {\n    const [nameSearch, setNameSearch] = useState<string>('')\n\n    const handleSearchChange = (event: any) => {\n        setNameSearch(event.target.value)\n        console.log(event.target.value)\n        props.filterButtonsByName(event.currentTarget.value)\n    }\n\n    return(\n        <form\n            className='nav-search'\n        >\n            <input\n                placeholder='search by name'\n                value={nameSearch}\n                onChange={handleSearchChange}\n                name=\"name\"\n            />\n        </form>\n    )\n}\n\nexport default NavSearch",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":7,"column":10,"nodeType":"94","messageId":"95","endLine":7,"endColumn":21},{"ruleId":"96","severity":1,"message":"97","line":22,"column":6,"nodeType":"98","endLine":22,"endColumn":16,"suggestions":"99"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"96","severity":1,"message":"100","line":27,"column":8,"nodeType":"98","endLine":27,"endColumn":20,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"102","line":5,"column":8,"nodeType":"94","messageId":"95","endLine":5,"endColumn":18},{"ruleId":"92","severity":1,"message":"103","line":14,"column":11,"nodeType":"94","messageId":"95","endLine":14,"endColumn":21},{"ruleId":"92","severity":1,"message":"104","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":19},{"ruleId":"92","severity":1,"message":"105","line":5,"column":8,"nodeType":"94","messageId":"95","endLine":5,"endColumn":18},{"ruleId":"92","severity":1,"message":"106","line":1,"column":32,"nodeType":"94","messageId":"95","endLine":1,"endColumn":42},{"ruleId":"92","severity":1,"message":"107","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"108","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":45},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'parkRequest' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.pathname'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has a missing dependency: 'createNavBtns'. Either include it or remove the dependency array.",["112"],"'SavedParks' is defined but never used.","'choosePark' is assigned a value but never used.","'bucketGreen' is defined but never used.","'checkGreen' is defined but never used.","'Activities' is defined but never used.","'FormEvent' is defined but never used.","'unstable_renderSubtreeIntoContainer' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [location.pathname, parkCode]",{"range":"117","text":"118"},"Update the dependencies array to be: [createNavBtns, nameSearch]",{"range":"119","text":"120"},[688,698],"[location.pathname, parkCode]",[877,889],"[createNavBtns, nameSearch]"]