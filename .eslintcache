[{"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/index.js":"1","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/App/App.tsx":"2","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkData.js":"3","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"4","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/MainNav/MainNav.tsx":"5","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"6","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/UserNav/UserNav.tsx":"7","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"8","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"9","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/Banner/Banner.tsx":"10","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/VisitedParks/VisitedParks.tsx":"11","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"12","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkList/ParkList.tsx":"13","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/Location/Location.tsx":"14","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/About/About.tsx":"15","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/Contact/Contact.tsx":"16","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"17","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/SavedCard/SavedCard.tsx":"18"},{"size":322,"mtime":1610138464010,"results":"19","hashOfConfig":"20"},{"size":1225,"mtime":1610209087652,"results":"21","hashOfConfig":"20"},{"size":11659,"mtime":1610211833037,"results":"22","hashOfConfig":"20"},{"size":2469,"mtime":1610211707458,"results":"23","hashOfConfig":"20"},{"size":2481,"mtime":1610209087655,"results":"24","hashOfConfig":"20"},{"size":264,"mtime":1610209087656,"results":"25","hashOfConfig":"20"},{"size":663,"mtime":1610138464010,"results":"26","hashOfConfig":"20"},{"size":1300,"mtime":1610209087657,"results":"27","hashOfConfig":"20"},{"size":638,"mtime":1610138464007,"results":"28","hashOfConfig":"20"},{"size":913,"mtime":1610211268425,"results":"29","hashOfConfig":"20"},{"size":504,"mtime":1610210880681,"results":"30","hashOfConfig":"20"},{"size":747,"mtime":1610209087655,"results":"31","hashOfConfig":"20"},{"size":718,"mtime":1610209087657,"results":"32","hashOfConfig":"20"},{"size":681,"mtime":1610209087654,"results":"33","hashOfConfig":"20"},{"size":635,"mtime":1610209087644,"results":"34","hashOfConfig":"20"},{"size":1143,"mtime":1610209087654,"results":"35","hashOfConfig":"20"},{"size":1306,"mtime":1610211712764,"results":"36","hashOfConfig":"20"},{"size":322,"mtime":1610210391142,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"vbljvs",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/index.js",[],["81","82"],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/App/App.tsx",["83"],"import './App.scss'\nimport React, { useState, useEffect } from 'react'\nimport MainNav from '../MainNav/MainNav'\nimport ParkContainer from '../ParkContainer/ParkContainer'\nimport { Route, Switch, useLocation } from 'react-router-dom'\nimport { nationalParks } from '../ParkData'\n\nconst App: React.FC = () => {\n  const [parkCode, setParkCode] = useState('')\n  const location = useLocation()\n  const choosePark = (parkCodeId: string) => {\n   setParkCode(parkCodeId)\n  }\n\n  useEffect(() => {\n    if (location.pathname === '/') {\n      generateRandomParkCode()\n    } else {\n      setParkCode(location.pathname.split('/')[1])\n    }\n  }, [parkCode])\n\n  const generateRandomParkCode = (): void => {\n    let index = Math.floor(Math.random() * nationalParks.length)\n    setParkCode(nationalParks[index].parkCode)\n  }\n\n  return (\n    <main className=\"body\">\n      <MainNav \n        choosePark={choosePark}\n        generateRandomParkCode={generateRandomParkCode}/>\n      <Switch>\n        <Route\n          path={location.pathname}\n          render={ () => {\n            return (\n              <ParkContainer \n                parkCode={parkCode}/>\n            )\n          }}\n        />\n      </Switch>\n    </main>\n  )\n}\n\nexport default App\n",["84","85"],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkData.js",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/MainNav/MainNav.tsx",["86","87"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\nimport { Link } from 'react-router-dom'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface FilterButtonsByName {\n  filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ninterface ParksOnDisplay {\n  parks: Array<LocalParkData>\n}\n\ntype NavProps = ChoosePark | LocalParkData | FilterButtonsByName | GenerateRandomParkCode\n\nconst MainNav: React.FC<NavProps> = (props) => {\n  const { choosePark } = props as ChoosePark\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const [nameSearch, setNameSearch] = useState<string>('')\n  const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>()\n\n  useEffect(() => {\n    if (!nameSearch) {\n      createNavBtns(nationalParks)\n    }\n  }, [nameSearch])\n\n  const createNavBtns = (parks: Array<LocalParkData>): void => {\n    const parkButtons = parks.map(park => {\n      return <ParkBtn\n        key={park.parkCode}\n        name={park.name}\n        parkCode={park.parkCode}\n        choosePark={choosePark}\n      />\n    })\n    setParksOnDisplay(parkButtons)\n  }\n\n  const filterButtonsByName = (searchTerm: string) => {\n    setNameSearch(searchTerm)\n    const filteredParks = nationalParks.filter(park => {\n      return park.name.toLowerCase().includes(searchTerm.toLowerCase())\n    })\n    createNavBtns(filteredParks)\n  }\n\n  return (\n    <nav className=\"main-nav\">\n      <img\n        className=\"logo\"\n        src={parkfinderLogo}\n        alt=\"National Parkfinder Logo\"\n      />\n      <h1>National Parkfinder</h1>\n      <NavSearch\n        filterButtonsByName={filterButtonsByName}\n      />\n      <ParkList\n        generateRandomParkCode={ generateRandomParkCode }\n        parksOnDisplay={parksOnDisplay}\n      />\n      <div className=\"main-nav-saved-btn-container\">\n        <Link\n        to='/user/visited'>\n            <button className=\"main-nav-saved-btn\">Visited</button>\n        </Link>\n        <Link\n          to=\"/user/bucket-list\">\n          <button className=\"main-nav-saved-btn\">Bucket List</button>\n        </Link>\n      </div>\n    </nav>\n  )\n}\n\nexport default MainNav","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/Banner/Banner.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/VisitedParks/VisitedParks.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/ParkList/ParkList.tsx",["88"],"import './ParkList.scss'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void;\n}\n\ninterface ParksOnDisplay {\n   parksOnDisplay: Array<object>\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype ParkListProps = GenerateRandomParkCode | ParksOnDisplay\n\nconst ParkList: React.FC<ParkListProps> = props => {\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const { parksOnDisplay } = props as ParksOnDisplay\n\n  return (\n    <section className=\"park-list\">\n      <button \n        className=\"park-button\"\n        onClick={() => generateRandomParkCode()}>\n          randomize\n      </button>\n      {parksOnDisplay}\n    </section>\n  )\n}\n\nexport default ParkList","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/Location/Location.tsx",["89"],"import { CurrentParkContainer } from '../interfaces'\nimport './Location.scss'\n\nconst Location: React.FC<CurrentParkContainer> = props => {\n  const { currentPark } = props as CurrentParkContainer \n    return (\n      <section>\n        <p><b>Driving directions to {currentPark.name}: </b>{currentPark.directionsInfo}</p>\n        <iframe \n            src={`https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d196281.64169563106!2d${currentPark.longitude}!3d${currentPark.latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1610139788967!5m2!1sen!2sus`} \n            width = \"800\" height = \"200\">\n        </iframe >\n      </section>\n    )\n}\n\nexport default Location\n","/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/About/About.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["90","91"],"/Users/sarahosgood/turing/3rdMod/projects/national-parkfinder/src/SavedCard/SavedCard.tsx",["92"],"import { LocalParkData } from '../interfaces'\n\nconst SavedCard: React.FC<LocalParkData> = (props) => {\n  const { name } = props as LocalParkData\n  const { image } = props as LocalParkData\n  // const { key } = props as LocalParkData\n\n  return (\n    <div>\n      <h1>{name}</h1>\n    </div>\n  )\n  \n}\n\nexport default SavedCard;",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":21,"column":6,"nodeType":"99","endLine":21,"endColumn":16,"suggestions":"100"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"101","severity":1,"message":"102","line":23,"column":11,"nodeType":"103","messageId":"104","endLine":23,"endColumn":25},{"ruleId":"97","severity":1,"message":"105","line":39,"column":6,"nodeType":"99","endLine":39,"endColumn":18,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"107","line":3,"column":11,"nodeType":"103","messageId":"104","endLine":3,"endColumn":21},{"ruleId":"108","severity":1,"message":"109","line":9,"column":9,"nodeType":"110","endLine":11,"endColumn":42},{"ruleId":"101","severity":1,"message":"111","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":19},{"ruleId":"101","severity":1,"message":"112","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":18},{"ruleId":"101","severity":1,"message":"113","line":5,"column":11,"nodeType":"103","messageId":"104","endLine":5,"endColumn":16},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.pathname'. Either include it or remove the dependency array.","ArrayExpression",["116"],"@typescript-eslint/no-unused-vars","'ParksOnDisplay' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'createNavBtns'. Either include it or remove the dependency array.",["117"],"'ChoosePark' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'bucketGreen' is defined but never used.","'checkGreen' is defined but never used.","'image' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [location.pathname, parkCode]",{"range":"122","text":"123"},"Update the dependencies array to be: [createNavBtns, nameSearch]",{"range":"124","text":"125"},[630,640],"[location.pathname, parkCode]",[1146,1158],"[createNavBtns, nameSearch]"]