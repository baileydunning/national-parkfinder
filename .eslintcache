[{"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js":"1","/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx":"2","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js":"3","/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx":"4","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"5","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"6","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx":"7","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx":"8","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"9","/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx":"10","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"11","/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"12","/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx":"13","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx":"14","/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx":"15"},{"size":322,"mtime":1610082543701,"results":"16","hashOfConfig":"17"},{"size":1114,"mtime":1610124327662,"results":"18","hashOfConfig":"17"},{"size":11659,"mtime":1610067659096,"results":"19","hashOfConfig":"17"},{"size":2251,"mtime":1610116983349,"results":"20","hashOfConfig":"17"},{"size":1822,"mtime":1610123957894,"results":"21","hashOfConfig":"17"},{"size":264,"mtime":1610067659096,"results":"22","hashOfConfig":"17"},{"size":593,"mtime":1610067659094,"results":"23","hashOfConfig":"17"},{"size":531,"mtime":1610082543701,"results":"24","hashOfConfig":"17"},{"size":638,"mtime":1610123136364,"results":"25","hashOfConfig":"17"},{"size":663,"mtime":1610117692511,"results":"26","hashOfConfig":"17"},{"size":1572,"mtime":1610117463471,"results":"27","hashOfConfig":"17"},{"size":895,"mtime":1610057039939,"results":"28","hashOfConfig":"17"},{"size":216,"mtime":1610117088261,"results":"29","hashOfConfig":"17"},{"size":125,"mtime":1610057039941,"results":"30","hashOfConfig":"17"},{"size":126,"mtime":1610057039940,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"2r4utd",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/bailey/turing/3mod/projects/national-parkfinder/src/index.js",[],["68","69"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/App/App.tsx",["70","71","72"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkData.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/MainNav/MainNav.tsx",["73","74","75"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface FilterButtonsByName {\n    filterButtonsByName: (searchTerm: string) => any\n}\n\ntype NavProps = ChoosePark | LocalParkData | FilterButtonsByName\n\nconst MainNav: React.FC<NavProps> = (props) => {\n    const { choosePark } = props as ChoosePark\n    const [nameSearch, setNameSearch] = useState<string>('')\n    const [parksOnDisplay, setParksOnDisplay] = useState<Array<LocalParkData>>()\n\n    useEffect(() => {\n        const parkButtons: any = nationalParks.map(park => {\n            return <ParkBtn\n                key={park.parkCode}\n                name={park.name}\n                parkCode={park.parkCode}\n                choosePark={choosePark}\n            />\n        })\n        setParksOnDisplay(parkButtons)\n    }, [nameSearch])\n\n    // const filterButtonsByName = (searchTerm: string): FilterButtonsByName => {\n    //     if (parksOnDisplay) {\n    //         setNameSearch(searchTerm)\n    //         const filteredParks = parksOnDisplay.filter(park => {\n    //         return park.name.includes(searchTerm)\n    //     })\n    //         setParksOnDisplay(filteredParks)\n    //     }\n    // }\n\n    return (\n        <nav className=\"main-nav\">\n            <img \n                className=\"logo\"\n                src={parkfinderLogo}\n                alt=\"National Parkfinder Logo\"\n            />\n            <h1>National Parkfinder</h1>\n            {/* <NavSearch \n                filterButtonsByName={filterButtonsByName}\n            /> */}\n            <ParkList \n                choosePark={choosePark}\n                parksOnDisplay={parksOnDisplay} \n            />\n            <div className=\"main-nav-saved-btn-container\">\n                <button className=\"main-nav-saved-btn\">Visited</button>\n                <button className=\"main-nav-saved-btn\">Bucket List</button>\n            </div>\n        </nav>\n    )\n}\n\nexport default MainNav",["76","77"],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",["78"],"import { useState, useEffect, Fragment } from 'react'\nimport Banner from '../Banner/Banner'\nimport UserNav from '../UserNav/UserNav'\nimport ParkInfo from '../ParkInfo/ParkInfo'\nimport SavedParks from '../SavedParks/SavedParks'\nimport { ParkCode, CurrentPark } from '../interfaces'\nimport { parkRequest } from './npsApiCall'\nimport { Switch, Route } from 'react-router-dom'\nimport './ParkContainer.scss'\nimport { nationalParks } from '../ParkData'\n\n\ntype ParkContainerProps = ParkCode | CurrentPark\n\nconst ParkContainer: React.FC<ParkContainerProps> = props => {\n\n  const [currentPark, setCurrentPark] = useState<CurrentPark>()\n  const { parkCode } = props as ParkCode\n  \n  useEffect(() => {\n    if (parkCode !== '') {\n      parkRequest(parkCode)\n      .then(data => {\n        setCurrentPark(data.data[0])\n      })    \n      .catch(error => setCurrentPark(error.message))\n    } \n  }, [parkCode])\n\n  return (\n    <section>\n      {currentPark && \n        <Switch>\n          <Fragment>\n            <Banner \n              currentPark={currentPark} />\n            <UserNav \n              currentPark={currentPark} />\n            <Route\n              exact \n              path='/:matchedCode/about'\n              render={({match}) => {\n                const matchedCode = nationalParks.find(park => {\n                  return park.parkCode === match.params.parkCode})\n                  console.log(matchedCode)\n                return (\n                  <ParkInfo \n                  currentPark={currentPark} />\n                )\n              }}\n            />\n              {/* <Route\n                path='/:savedParks'\n                render={props => {\n                  <SavedParks />\n                }}\n              /> */}\n          </Fragment>\n        </Switch>\n      }\n    </section>\n  )\n}\n\nexport default ParkContainer","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Banner/Banner.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkList/ParkList.tsx",["79"],"import './ParkList.scss'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void;\n}\n\ninterface ParksOnDisplay {\n   parksOnDisplay: Array<object>\n}\n\ntype ParkListProps = ChoosePark | ParksOnDisplay\n\nconst ParkList: React.FC<ParkListProps> = props => {\n  const { choosePark } = props as ChoosePark\n  const { parksOnDisplay } = props as ParksOnDisplay\n\n  return (\n    <section className=\"park-list\">\n      <button className=\"park-button\">randomize</button>\n      {parksOnDisplay}\n    </section>\n  )\n}\n\nexport default ParkList","/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["80","81"],"import './BannerIcons.scss'\nimport bucketBlack from './icons/bucket-black.png'\nimport bucketGreen from './icons/bucket-green.png'\nimport checkBlack from './icons/check-black.png'\nimport checkGreen from './icons/check-green.png'\n\nfunction BannerIcons() {\n    return (\n        <section className=\"banner-icons\">\n            <div className=\"banner-btn-container\">\n            <img \n                src={checkBlack}\n                alt=\"not checked\"\n                className=\"saved-icon\"\n            />\n            <h2>Add To Visited</h2>\n            </div>\n            <div className=\"banner-btn-container\">\n                <img\n                    src={bucketBlack}\n                    alt=\"not added to bucket list\"\n                    className=\"saved-icon\"\n                />\n                <h2>Add To Bucket List</h2>\n            </div>\n        </section>\n    )\n}\n\nexport default BannerIcons","/Users/bailey/turing/3mod/projects/national-parkfinder/src/About/About.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Location/Location.tsx",[],"/Users/bailey/turing/3mod/projects/national-parkfinder/src/Contact/Contact.tsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":7,"column":10,"nodeType":"88","messageId":"89","endLine":7,"endColumn":21},{"ruleId":"86","severity":1,"message":"90","line":9,"column":11,"nodeType":"88","messageId":"89","endLine":9,"endColumn":21},{"ruleId":"86","severity":1,"message":"91","line":13,"column":11,"nodeType":"88","messageId":"89","endLine":13,"endColumn":15},{"ruleId":"86","severity":1,"message":"92","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":17},{"ruleId":"86","severity":1,"message":"93","line":22,"column":24,"nodeType":"88","messageId":"89","endLine":22,"endColumn":37},{"ruleId":"94","severity":1,"message":"95","line":35,"column":8,"nodeType":"96","endLine":35,"endColumn":20,"suggestions":"97"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"98","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":18},{"ruleId":"86","severity":1,"message":"99","line":14,"column":11,"nodeType":"88","messageId":"89","endLine":14,"endColumn":21},{"ruleId":"86","severity":1,"message":"100","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":19},{"ruleId":"86","severity":1,"message":"101","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":18},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"@typescript-eslint/no-unused-vars","'parkRequest' is defined but never used.","Identifier","unusedVar","'ChoosePark' is defined but never used.","'Park' is defined but never used.","'NavSearch' is defined but never used.","'setNameSearch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'choosePark'. Either include it or remove the dependency array.","ArrayExpression",["104"],"'SavedParks' is defined but never used.","'choosePark' is assigned a value but never used.","'bucketGreen' is defined but never used.","'checkGreen' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},"Update the dependencies array to be: [choosePark, nameSearch]",{"range":"107","text":"108"},[1130,1142],"[choosePark, nameSearch]"]