[{"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/index.js":"1","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/App/App.tsx":"2","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkData.js":"3","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx":"4","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/MainNav/MainNav.tsx":"5","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/npsApiCall.js":"6","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/UserNav/UserNav.tsx":"7","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx":"8","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Banner/Banner.tsx":"9","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx":"10","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/NavSearch/NavSearch.tsx":"11","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkList/ParkList.tsx":"12","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Location/Location.tsx":"13","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Contact/Contact.tsx":"14","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/About/About.tsx":"15","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx":"16","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedCard/SavedCard.tsx":"17","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/VisitedParks/VisitedParks.tsx":"18","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Footer/Footer.tsx":"19","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/interfaces.tsx":"20"},{"size":323,"mtime":1610242263178,"results":"21","hashOfConfig":"22"},{"size":1359,"mtime":1610242263165,"results":"23","hashOfConfig":"22"},{"size":13972,"mtime":1610242263173,"results":"24","hashOfConfig":"22"},{"size":3329,"mtime":1610244356061,"results":"25","hashOfConfig":"22"},{"size":2117,"mtime":1610242263171,"results":"26","hashOfConfig":"22"},{"size":264,"mtime":1610163568846,"results":"27","hashOfConfig":"22"},{"size":589,"mtime":1610242263177,"results":"28","hashOfConfig":"22"},{"size":1996,"mtime":1610242263174,"results":"29","hashOfConfig":"22"},{"size":918,"mtime":1610242263166,"results":"30","hashOfConfig":"22"},{"size":620,"mtime":1610242263172,"results":"31","hashOfConfig":"22"},{"size":686,"mtime":1610242263172,"results":"32","hashOfConfig":"22"},{"size":844,"mtime":1610242263175,"results":"33","hashOfConfig":"22"},{"size":643,"mtime":1610242263169,"results":"34","hashOfConfig":"22"},{"size":1122,"mtime":1610242263167,"results":"35","hashOfConfig":"22"},{"size":684,"mtime":1610242263164,"results":"36","hashOfConfig":"22"},{"size":2449,"mtime":1610242296471,"results":"37","hashOfConfig":"22"},{"size":351,"mtime":1610242263176,"results":"38","hashOfConfig":"22"},{"size":953,"mtime":1610244300470,"results":"39","hashOfConfig":"22"},{"size":424,"mtime":1610242263169,"results":"40","hashOfConfig":"22"},{"size":1707,"mtime":1610244245484,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1agcvs0",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/index.js",[],["91","92"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/App/App.tsx",["93"],"import './App.scss'\nimport React, { useState, useEffect } from 'react'\nimport MainNav from '../MainNav/MainNav'\nimport ParkContainer from '../ParkContainer/ParkContainer'\nimport { Route, Switch, useLocation } from 'react-router-dom'\nimport { nationalParks } from '../ParkData'\n\nconst App: React.FC = () => {\n  const [parkCode, setParkCode] = useState('')\n  const location = useLocation()\n  const choosePark = (parkCodeId: string) => {\n   setParkCode(parkCodeId)\n  }\n\n  useEffect(() => {\n    if (location.pathname === '/') {\n      generateRandomParkCode()\n    } else {\n      setParkCode(location.pathname.split('/')[1])\n    }\n  }, [parkCode])\n\n  const generateRandomParkCode = (): void => {\n    let index = Math.floor(Math.random() * nationalParks.length)\n    setParkCode(nationalParks[index].parkCode)\n  }\n\n  return (\n    <main className=\"body\">\n      <MainNav \n        choosePark={choosePark}\n        generateRandomParkCode={generateRandomParkCode}/>\n      <Switch>\n        <Route\n          path={location.pathname}\n          render={ () => {\n            return (\n              <ParkContainer \n                parkCode={parkCode}/>\n            )\n          }}\n        />\n      </Switch>\n    </main>\n  )\n}\n\nexport default App\n",["94","95"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkData.js",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/ParkContainer.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/MainNav/MainNav.tsx",["96","97"],"import { useState, useEffect } from 'react'\nimport './MainNav.scss';\nimport NavSearch from '../NavSearch/NavSearch'\nimport ParkList from '../ParkList/ParkList'\nimport parkfinderLogo from './landscape.png'\nimport { nationalParks } from '../ParkData'\nimport ParkBtn from '../ParkBtn/ParkBtn'\nimport { LocalParkData } from '../interfaces'\nimport { Link } from 'react-router-dom'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void\n}\n\ninterface FilterButtonsByName {\n  filterButtonsByName: (searchTerm: string) => void\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ninterface ParksOnDisplay {\n  parks: Array<LocalParkData>\n}\n\ntype NavProps = ChoosePark | LocalParkData | FilterButtonsByName | GenerateRandomParkCode\n\nconst MainNav: React.FC<NavProps> = (props) => {\n  const { choosePark } = props as ChoosePark\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const [nameSearch, setNameSearch] = useState<string>('')\n  const [parksOnDisplay, setParksOnDisplay] = useState<Array<JSX.Element>>()\n\n  useEffect(() => {\n    if (!nameSearch) {\n      createNavBtns(nationalParks)\n    }\n  }, [nameSearch])\n\n  const createNavBtns = (parks: Array<LocalParkData>): void => {\n    const parkButtons = parks.map(park => {\n      return <ParkBtn\n        key={park.parkCode}\n        name={park.name}\n        parkCode={park.parkCode}\n        choosePark={choosePark}\n      />\n    })\n    setParksOnDisplay(parkButtons)\n  }\n\n  const filterButtonsByName = (searchTerm: string) => {\n    setNameSearch(searchTerm)\n    const filteredParks = nationalParks.filter(park => {\n      return park.name.toLowerCase().includes(searchTerm.toLowerCase())\n    })\n    createNavBtns(filteredParks)\n  }\n\n  return (\n    <nav className=\"main-nav\">\n      <img\n        className=\"logo\"\n        src={parkfinderLogo}\n        alt=\"National Parkfinder Logo\"\n      />\n      <h1>National Parkfinder</h1>\n      <NavSearch\n        filterButtonsByName={filterButtonsByName}\n      />\n      <ParkList\n        generateRandomParkCode={ generateRandomParkCode }\n        parksOnDisplay={parksOnDisplay}\n      />\n      <div className=\"main-nav-saved-btn-container\">\n        <Link\n        to='/user/visited'>\n            <button className=\"main-nav-saved-btn\">Visited</button>\n        </Link>\n        <Link\n          to=\"/user/bucket-list\">\n          <button className=\"main-nav-saved-btn\">Bucket List</button>\n        </Link>\n      </div>\n    </nav>\n  )\n}\n\nexport default MainNav","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkContainer/npsApiCall.js",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/UserNav/UserNav.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkInfo/ParkInfo.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Banner/Banner.tsx",["98","99"],"import './Banner.scss'\nimport { CurrentParkContainer, LocalParkContainer, LocalParkData, AddToVisited } from '../interfaces'\nimport BannerIcons from '../BannerIcons/BannerIcons'\n\ntype BannerIconsProps = AddToVisited | LocalParkContainer | CurrentParkContainer | { parkCode: string }\n\nconst Banner: React.FC<BannerIconsProps> = props => {\n  const { currentPark } = props as CurrentParkContainer\n  const { images } = currentPark as any\n  const { parkCode } = props as any\n  const { addToVisited } = props as AddToVisited\n\n  return (\n    <section className='banner'>\n      {<img\n        className='banner-img'\n        src={images[0].url}\n        alt={images[0].altText}\n      />}\n      <h1>{currentPark.fullName}, {currentPark.states}</h1>\n      <BannerIcons\n        addToVisited={addToVisited}\n        currentPark={currentPark}\n      />\n    </section>\n  )\n}\n\nexport default Banner","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkBtn/ParkBtn.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/NavSearch/NavSearch.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/ParkList/ParkList.tsx",["100"],"import './ParkList.scss'\n\ninterface ChoosePark {\n  choosePark: (parkCode: string) => void;\n}\n\ninterface ParksOnDisplay {\n   parksOnDisplay: Array<object>\n}\n\ninterface GenerateRandomParkCode {\n  generateRandomParkCode: () => void\n}\n\ntype ParkListProps = GenerateRandomParkCode | ParksOnDisplay\n\nconst ParkList: React.FC<ParkListProps> = props => {\n  const { generateRandomParkCode } = props as GenerateRandomParkCode\n  const { parksOnDisplay } = props as ParksOnDisplay\n\n  return (\n    <section className=\"park-list\">\n      <button \n        className=\"park-button\"\n        onClick={() => generateRandomParkCode()}>\n          randomize\n      </button>\n      {parksOnDisplay}\n    </section>\n  )\n}\n\nexport default ParkList","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Location/Location.tsx",["101"],"import { CurrentParkContainer } from '../interfaces'\nimport './Location.scss'\n\nconst Location: React.FC<CurrentParkContainer> = props => {\n  const { currentPark } = props as CurrentParkContainer \n    return (\n      <section>\n        <p><b>Driving directions to {currentPark.name}: </b>{currentPark.directionsInfo}</p>\n        <iframe \n            src={`https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d196281.64169563106!2d${currentPark.longitude}!3d${currentPark.latitude}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sus!4v1610139788967!5m2!1sen!2sus`} \n            width = \"800\" height = \"200\">\n        </iframe >\n      </section>\n    )\n}\n\nexport default Location\n","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Contact/Contact.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/About/About.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/BannerIcons/BannerIcons.tsx",["102"],"import './BannerIcons.scss'\nimport { useEffect, useState } from 'react'\nimport { AddRemoveFunctionality } from '../interfaces'\nimport bucketBlack from './icons/bucket-black.png'\nimport bucketGreen from './icons/bucket-green.png'\nimport checkBlack from './icons/check-black.png'\nimport checkGreen from './icons/check-green.png'\n\ntype BannerIconsProps = AddRemoveFunctionality | { localPark: () => any | void } \n\n\nconst BannerIcons: React.FC<BannerIconsProps> = props => {\n  const { addToVisited } = props as AddRemoveFunctionality\n  const { deleteFromVisited } = props as AddRemoveFunctionality\n  const { addToBucketList } = props as AddRemoveFunctionality\n  const { deleteFromBucketList } = props as AddRemoveFunctionality\n  const { localPark } = props as any\n\n  const [checkColor, setCheckColor] = useState<any>()\n  const [bucketColor, setBucketColor] = useState<any>()\n\n  useEffect(() => {\n    if (localPark.visited) {\n      setCheckColor(checkGreen)\n    } else {\n      setCheckColor(checkBlack)\n    }\n\n    if (localPark.bucketList) {\n      setBucketColor(bucketGreen)\n    } else {\n      setBucketColor(bucketBlack)\n    }\n  })\n\n  const handleVisitedPark = () => {\n    if (!localPark.visited) {\n      addToVisited(localPark.parkCode)\n      localPark.visited = true\n    } else {\n      deleteFromVisited(localPark.parkCode)\n      localPark.visited = false\n    }\n  }\n\n  const handleBucketListPark = () => {\n    if (!localPark.bucketList) {\n      addToBucketList(localPark.parkCode)\n      localPark.bucketList = true\n    } else {\n      deleteFromBucketList(localPark.parkCode)\n      localPark.bucketList = false\n    }\n  }\n\n  return (\n    <section className=\"banner-icons\">\n      <div role=\"button\"\n        onClick={ handleVisitedPark }\n        className=\"banner-btn-container\">\n        <img\n          src={checkColor}\n          alt=\"not checked\"\n          className=\"saved-icon\"\n        />\n        {!localPark.visited && <h2>Add To Visited</h2>}\n        {localPark.visited && <h2>Remove From Visited</h2>}\n      </div>\n      <div\n        role=\"button\"\n        onClick={ handleBucketListPark }\n        className=\"banner-btn-container\">\n        <img\n          src={bucketColor}\n          alt=\"not added to bucket list\"\n          className=\"saved-icon\"\n        />\n        {!localPark.bucketList && <h2>Add To Bucket List</h2>}\n        {localPark.bucketList && <h2>Remove From Bucket List</h2>}\n      </div>\n    </section>\n  )\n}\n\nexport default BannerIcons","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/SavedCard/SavedCard.tsx",["103"],"import { LocalParkData } from '../interfaces'\n\nconst SavedCard: React.FC<LocalParkData> = (props) => {\n  const { name } = props as LocalParkData\n  const { image } = props as LocalParkData\n  // const { key } = props as LocalParkData\n\n  return (\n    <div>\n      <h1>{name}</h1>\n    </div>\n  )\n  \n}\n\nexport default SavedCard","/Users/jpcarey/turing/3module/projects/national-parkfinder/src/VisitedParks/VisitedParks.tsx",["104"],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/Footer/Footer.tsx",[],"/Users/jpcarey/turing/3module/projects/national-parkfinder/src/interfaces.tsx",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":21,"column":6,"nodeType":"111","endLine":21,"endColumn":16,"suggestions":"112"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"113","severity":1,"message":"114","line":23,"column":11,"nodeType":"115","messageId":"116","endLine":23,"endColumn":25},{"ruleId":"109","severity":1,"message":"117","line":39,"column":6,"nodeType":"111","endLine":39,"endColumn":18,"suggestions":"118"},{"ruleId":"113","severity":1,"message":"119","line":2,"column":52,"nodeType":"115","messageId":"116","endLine":2,"endColumn":65},{"ruleId":"113","severity":1,"message":"120","line":10,"column":11,"nodeType":"115","messageId":"116","endLine":10,"endColumn":19},{"ruleId":"113","severity":1,"message":"121","line":3,"column":11,"nodeType":"115","messageId":"116","endLine":3,"endColumn":21},{"ruleId":"122","severity":1,"message":"123","line":9,"column":9,"nodeType":"124","endLine":11,"endColumn":42},{"ruleId":"109","severity":1,"message":"125","line":22,"column":3,"nodeType":"115","endLine":22,"endColumn":12,"suggestions":"126"},{"ruleId":"113","severity":1,"message":"127","line":5,"column":11,"nodeType":"115","messageId":"116","endLine":5,"endColumn":16},{"ruleId":"113","severity":1,"message":"128","line":8,"column":24,"nodeType":"115","messageId":"116","endLine":8,"endColumn":34},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.pathname'. Either include it or remove the dependency array.","ArrayExpression",["131"],"@typescript-eslint/no-unused-vars","'ParksOnDisplay' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'createNavBtns'. Either include it or remove the dependency array.",["132"],"'LocalParkData' is defined but never used.","'parkCode' is assigned a value but never used.","'ChoosePark' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","React Hook useEffect contains a call to 'setCheckColor'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [localPark.visited, localPark.bucketList] as a second argument to the useEffect Hook.",["133"],"'image' is assigned a value but never used.","'bucketList' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [location.pathname, parkCode]",{"range":"140","text":"141"},"Update the dependencies array to be: [createNavBtns, nameSearch]",{"range":"142","text":"143"},"Add dependencies array: [localPark.visited, localPark.bucketList]",{"range":"144","text":"145"},[630,640],"[location.pathname, parkCode]",[1146,1158],"[createNavBtns, nameSearch]",[1127,1127],", [localPark.visited, localPark.bucketList]"]